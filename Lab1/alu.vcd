$date
	Thu Oct 15 13:09:02 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testALU $end
$var wire 1 ! cout $end
$var wire 32 " out [31:0] $end
$var wire 1 # overflow $end
$var wire 1 $ zero $end
$var reg 32 % a [31:0] $end
$var reg 32 & b [31:0] $end
$var reg 3 ' control [2:0] $end
$scope module alu $end
$var wire 1 ( bInv $end
$var wire 33 ) carry [32:0] $end
$var wire 1 ! carryout $end
$var wire 3 * command [2:0] $end
$var wire 3 + deviceChoice [2:0] $end
$var wire 1 , notCommand1 $end
$var wire 1 - notCommand2 $end
$var wire 1 . notOverflow $end
$var wire 32 / operandA [31:0] $end
$var wire 32 0 operandB [31:0] $end
$var wire 1 # overflow $end
$var wire 32 1 result [31:0] $end
$var wire 1 2 sltChoice $end
$var wire 1 3 sltOpp $end
$var wire 1 4 sltOppTemp $end
$var wire 32 5 sltResult [31:0] $end
$var wire 1 6 sltSameSign $end
$var wire 1 7 tempOverflow $end
$var wire 1 8 tempZero $end
$var wire 32 9 tempresult [31:0] $end
$var wire 1 $ zero $end
$scope module aluControlLUT $end
$var wire 3 : ALUcommand [2:0] $end
$var reg 1 ; invertB $end
$var reg 3 < muxindex [2:0] $end
$var reg 1 = sltSet $end
$upscope $end
$scope module ourxor $end
$var wire 1 > AnandB $end
$var wire 1 ? AnorB $end
$var wire 1 @ AorB $end
$var wire 1 A a $end
$var wire 1 ! b $end
$var wire 1 B notXOR $end
$var wire 1 7 out $end
$upscope $end
$scope module mux32 $end
$var wire 32 C andIn1 [31:0] $end
$var wire 32 D andIn2 [31:0] $end
$var wire 32 E in1 [31:0] $end
$var wire 32 F in2 [31:0] $end
$var wire 1 G notSelector $end
$var wire 32 H out [31:0] $end
$var wire 1 2 selector $end
$scope begin ANDGenerator[0] $end
$upscope $end
$scope begin ANDGenerator[1] $end
$upscope $end
$scope begin ANDGenerator[2] $end
$upscope $end
$scope begin ANDGenerator[3] $end
$upscope $end
$scope begin ANDGenerator[4] $end
$upscope $end
$scope begin ANDGenerator[5] $end
$upscope $end
$scope begin ANDGenerator[6] $end
$upscope $end
$scope begin ANDGenerator[7] $end
$upscope $end
$scope begin ANDGenerator[8] $end
$upscope $end
$scope begin ANDGenerator[9] $end
$upscope $end
$scope begin ANDGenerator[10] $end
$upscope $end
$scope begin ANDGenerator[11] $end
$upscope $end
$scope begin ANDGenerator[12] $end
$upscope $end
$scope begin ANDGenerator[13] $end
$upscope $end
$scope begin ANDGenerator[14] $end
$upscope $end
$scope begin ANDGenerator[15] $end
$upscope $end
$scope begin ANDGenerator[16] $end
$upscope $end
$scope begin ANDGenerator[17] $end
$upscope $end
$scope begin ANDGenerator[18] $end
$upscope $end
$scope begin ANDGenerator[19] $end
$upscope $end
$scope begin ANDGenerator[20] $end
$upscope $end
$scope begin ANDGenerator[21] $end
$upscope $end
$scope begin ANDGenerator[22] $end
$upscope $end
$scope begin ANDGenerator[23] $end
$upscope $end
$scope begin ANDGenerator[24] $end
$upscope $end
$scope begin ANDGenerator[25] $end
$upscope $end
$scope begin ANDGenerator[26] $end
$upscope $end
$scope begin ANDGenerator[27] $end
$upscope $end
$scope begin ANDGenerator[28] $end
$upscope $end
$scope begin ANDGenerator[29] $end
$upscope $end
$scope begin ANDGenerator[30] $end
$upscope $end
$scope begin ANDGenerator[31] $end
$upscope $end
$upscope $end
$scope begin ALUbit[0] $end
$scope begin genblk2 $end
$scope module strucALU $end
$var wire 1 I a $end
$var wire 1 J aADDb $end
$var wire 1 K aANDb $end
$var wire 1 L aNANDb $end
$var wire 1 M aNORb $end
$var wire 1 N aORb $end
$var wire 1 O aXORb $end
$var wire 1 P aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 Q aXORb_AND_carryin $end
$var wire 1 R b $end
$var wire 1 S bChoice $end
$var wire 1 T bInv $end
$var wire 1 ( bInvert $end
$var wire 1 U carryin $end
$var wire 1 V carryout $end
$var wire 3 W muxDevice [2:0] $end
$var wire 1 X out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 R in0 $end
$var wire 1 Y in0nandnAddr $end
$var wire 1 T in1 $end
$var wire 1 Z in1nandAddr $end
$var wire 1 [ nAddr $end
$var wire 1 S out $end
$upscope $end
$scope module ourXor $end
$var wire 1 \ AnandB $end
$var wire 1 ] AnorB $end
$var wire 1 ^ AorB $end
$var wire 1 I a $end
$var wire 1 S b $end
$var wire 1 _ notXOR $end
$var wire 1 O out $end
$upscope $end
$scope module oXOR $end
$var wire 1 ` AnandB $end
$var wire 1 a AnorB $end
$var wire 1 b AorB $end
$var wire 1 O a $end
$var wire 1 U b $end
$var wire 1 c notXOR $end
$var wire 1 J out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 d addr [2:0] $end
$var wire 1 J in0 $end
$var wire 1 O in1 $end
$var wire 1 e in2 $end
$var wire 1 K in3 $end
$var wire 1 L in4 $end
$var wire 1 M in5 $end
$var wire 1 N in6 $end
$var wire 1 K in7 $end
$var wire 1 f naddr0 $end
$var wire 1 g naddr1 $end
$var wire 1 h naddr2 $end
$var wire 1 X out $end
$var wire 1 i temp0 $end
$var wire 1 j temp1 $end
$var wire 1 k temp2 $end
$var wire 1 l temp3 $end
$var wire 1 m temp4 $end
$var wire 1 n temp5 $end
$var wire 1 o temp6 $end
$var wire 1 p temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[1] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 q a $end
$var wire 1 r aADDb $end
$var wire 1 s aANDb $end
$var wire 1 t aNANDb $end
$var wire 1 u aNORb $end
$var wire 1 v aORb $end
$var wire 1 w aXORb $end
$var wire 1 x aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 y aXORb_AND_carryin $end
$var wire 1 z b $end
$var wire 1 { bChoice $end
$var wire 1 | bInv $end
$var wire 1 ( bInvert $end
$var wire 1 } carryin $end
$var wire 1 ~ carryout $end
$var wire 3 !" muxDevice [2:0] $end
$var wire 1 "" out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 z in0 $end
$var wire 1 #" in0nandnAddr $end
$var wire 1 | in1 $end
$var wire 1 $" in1nandAddr $end
$var wire 1 %" nAddr $end
$var wire 1 { out $end
$upscope $end
$scope module ourXor $end
$var wire 1 &" AnandB $end
$var wire 1 '" AnorB $end
$var wire 1 (" AorB $end
$var wire 1 q a $end
$var wire 1 { b $end
$var wire 1 )" notXOR $end
$var wire 1 w out $end
$upscope $end
$scope module oXOR $end
$var wire 1 *" AnandB $end
$var wire 1 +" AnorB $end
$var wire 1 ," AorB $end
$var wire 1 w a $end
$var wire 1 } b $end
$var wire 1 -" notXOR $end
$var wire 1 r out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 ." addr [2:0] $end
$var wire 1 r in0 $end
$var wire 1 w in1 $end
$var wire 1 /" in2 $end
$var wire 1 s in3 $end
$var wire 1 t in4 $end
$var wire 1 u in5 $end
$var wire 1 v in6 $end
$var wire 1 s in7 $end
$var wire 1 0" naddr0 $end
$var wire 1 1" naddr1 $end
$var wire 1 2" naddr2 $end
$var wire 1 "" out $end
$var wire 1 3" temp0 $end
$var wire 1 4" temp1 $end
$var wire 1 5" temp2 $end
$var wire 1 6" temp3 $end
$var wire 1 7" temp4 $end
$var wire 1 8" temp5 $end
$var wire 1 9" temp6 $end
$var wire 1 :" temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[2] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 ;" a $end
$var wire 1 <" aADDb $end
$var wire 1 =" aANDb $end
$var wire 1 >" aNANDb $end
$var wire 1 ?" aNORb $end
$var wire 1 @" aORb $end
$var wire 1 A" aXORb $end
$var wire 1 B" aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 C" aXORb_AND_carryin $end
$var wire 1 D" b $end
$var wire 1 E" bChoice $end
$var wire 1 F" bInv $end
$var wire 1 ( bInvert $end
$var wire 1 G" carryin $end
$var wire 1 H" carryout $end
$var wire 3 I" muxDevice [2:0] $end
$var wire 1 J" out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 D" in0 $end
$var wire 1 K" in0nandnAddr $end
$var wire 1 F" in1 $end
$var wire 1 L" in1nandAddr $end
$var wire 1 M" nAddr $end
$var wire 1 E" out $end
$upscope $end
$scope module ourXor $end
$var wire 1 N" AnandB $end
$var wire 1 O" AnorB $end
$var wire 1 P" AorB $end
$var wire 1 ;" a $end
$var wire 1 E" b $end
$var wire 1 Q" notXOR $end
$var wire 1 A" out $end
$upscope $end
$scope module oXOR $end
$var wire 1 R" AnandB $end
$var wire 1 S" AnorB $end
$var wire 1 T" AorB $end
$var wire 1 A" a $end
$var wire 1 G" b $end
$var wire 1 U" notXOR $end
$var wire 1 <" out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 V" addr [2:0] $end
$var wire 1 <" in0 $end
$var wire 1 A" in1 $end
$var wire 1 W" in2 $end
$var wire 1 =" in3 $end
$var wire 1 >" in4 $end
$var wire 1 ?" in5 $end
$var wire 1 @" in6 $end
$var wire 1 =" in7 $end
$var wire 1 X" naddr0 $end
$var wire 1 Y" naddr1 $end
$var wire 1 Z" naddr2 $end
$var wire 1 J" out $end
$var wire 1 [" temp0 $end
$var wire 1 \" temp1 $end
$var wire 1 ]" temp2 $end
$var wire 1 ^" temp3 $end
$var wire 1 _" temp4 $end
$var wire 1 `" temp5 $end
$var wire 1 a" temp6 $end
$var wire 1 b" temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[3] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 c" a $end
$var wire 1 d" aADDb $end
$var wire 1 e" aANDb $end
$var wire 1 f" aNANDb $end
$var wire 1 g" aNORb $end
$var wire 1 h" aORb $end
$var wire 1 i" aXORb $end
$var wire 1 j" aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 k" aXORb_AND_carryin $end
$var wire 1 l" b $end
$var wire 1 m" bChoice $end
$var wire 1 n" bInv $end
$var wire 1 ( bInvert $end
$var wire 1 o" carryin $end
$var wire 1 p" carryout $end
$var wire 3 q" muxDevice [2:0] $end
$var wire 1 r" out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 l" in0 $end
$var wire 1 s" in0nandnAddr $end
$var wire 1 n" in1 $end
$var wire 1 t" in1nandAddr $end
$var wire 1 u" nAddr $end
$var wire 1 m" out $end
$upscope $end
$scope module ourXor $end
$var wire 1 v" AnandB $end
$var wire 1 w" AnorB $end
$var wire 1 x" AorB $end
$var wire 1 c" a $end
$var wire 1 m" b $end
$var wire 1 y" notXOR $end
$var wire 1 i" out $end
$upscope $end
$scope module oXOR $end
$var wire 1 z" AnandB $end
$var wire 1 {" AnorB $end
$var wire 1 |" AorB $end
$var wire 1 i" a $end
$var wire 1 o" b $end
$var wire 1 }" notXOR $end
$var wire 1 d" out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 ~" addr [2:0] $end
$var wire 1 d" in0 $end
$var wire 1 i" in1 $end
$var wire 1 !# in2 $end
$var wire 1 e" in3 $end
$var wire 1 f" in4 $end
$var wire 1 g" in5 $end
$var wire 1 h" in6 $end
$var wire 1 e" in7 $end
$var wire 1 "# naddr0 $end
$var wire 1 ## naddr1 $end
$var wire 1 $# naddr2 $end
$var wire 1 r" out $end
$var wire 1 %# temp0 $end
$var wire 1 &# temp1 $end
$var wire 1 '# temp2 $end
$var wire 1 (# temp3 $end
$var wire 1 )# temp4 $end
$var wire 1 *# temp5 $end
$var wire 1 +# temp6 $end
$var wire 1 ,# temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[4] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 -# a $end
$var wire 1 .# aADDb $end
$var wire 1 /# aANDb $end
$var wire 1 0# aNANDb $end
$var wire 1 1# aNORb $end
$var wire 1 2# aORb $end
$var wire 1 3# aXORb $end
$var wire 1 4# aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 5# aXORb_AND_carryin $end
$var wire 1 6# b $end
$var wire 1 7# bChoice $end
$var wire 1 8# bInv $end
$var wire 1 ( bInvert $end
$var wire 1 9# carryin $end
$var wire 1 :# carryout $end
$var wire 3 ;# muxDevice [2:0] $end
$var wire 1 <# out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 6# in0 $end
$var wire 1 =# in0nandnAddr $end
$var wire 1 8# in1 $end
$var wire 1 ># in1nandAddr $end
$var wire 1 ?# nAddr $end
$var wire 1 7# out $end
$upscope $end
$scope module ourXor $end
$var wire 1 @# AnandB $end
$var wire 1 A# AnorB $end
$var wire 1 B# AorB $end
$var wire 1 -# a $end
$var wire 1 7# b $end
$var wire 1 C# notXOR $end
$var wire 1 3# out $end
$upscope $end
$scope module oXOR $end
$var wire 1 D# AnandB $end
$var wire 1 E# AnorB $end
$var wire 1 F# AorB $end
$var wire 1 3# a $end
$var wire 1 9# b $end
$var wire 1 G# notXOR $end
$var wire 1 .# out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 H# addr [2:0] $end
$var wire 1 .# in0 $end
$var wire 1 3# in1 $end
$var wire 1 I# in2 $end
$var wire 1 /# in3 $end
$var wire 1 0# in4 $end
$var wire 1 1# in5 $end
$var wire 1 2# in6 $end
$var wire 1 /# in7 $end
$var wire 1 J# naddr0 $end
$var wire 1 K# naddr1 $end
$var wire 1 L# naddr2 $end
$var wire 1 <# out $end
$var wire 1 M# temp0 $end
$var wire 1 N# temp1 $end
$var wire 1 O# temp2 $end
$var wire 1 P# temp3 $end
$var wire 1 Q# temp4 $end
$var wire 1 R# temp5 $end
$var wire 1 S# temp6 $end
$var wire 1 T# temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[5] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 U# a $end
$var wire 1 V# aADDb $end
$var wire 1 W# aANDb $end
$var wire 1 X# aNANDb $end
$var wire 1 Y# aNORb $end
$var wire 1 Z# aORb $end
$var wire 1 [# aXORb $end
$var wire 1 \# aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 ]# aXORb_AND_carryin $end
$var wire 1 ^# b $end
$var wire 1 _# bChoice $end
$var wire 1 `# bInv $end
$var wire 1 ( bInvert $end
$var wire 1 a# carryin $end
$var wire 1 b# carryout $end
$var wire 3 c# muxDevice [2:0] $end
$var wire 1 d# out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 ^# in0 $end
$var wire 1 e# in0nandnAddr $end
$var wire 1 `# in1 $end
$var wire 1 f# in1nandAddr $end
$var wire 1 g# nAddr $end
$var wire 1 _# out $end
$upscope $end
$scope module ourXor $end
$var wire 1 h# AnandB $end
$var wire 1 i# AnorB $end
$var wire 1 j# AorB $end
$var wire 1 U# a $end
$var wire 1 _# b $end
$var wire 1 k# notXOR $end
$var wire 1 [# out $end
$upscope $end
$scope module oXOR $end
$var wire 1 l# AnandB $end
$var wire 1 m# AnorB $end
$var wire 1 n# AorB $end
$var wire 1 [# a $end
$var wire 1 a# b $end
$var wire 1 o# notXOR $end
$var wire 1 V# out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 p# addr [2:0] $end
$var wire 1 V# in0 $end
$var wire 1 [# in1 $end
$var wire 1 q# in2 $end
$var wire 1 W# in3 $end
$var wire 1 X# in4 $end
$var wire 1 Y# in5 $end
$var wire 1 Z# in6 $end
$var wire 1 W# in7 $end
$var wire 1 r# naddr0 $end
$var wire 1 s# naddr1 $end
$var wire 1 t# naddr2 $end
$var wire 1 d# out $end
$var wire 1 u# temp0 $end
$var wire 1 v# temp1 $end
$var wire 1 w# temp2 $end
$var wire 1 x# temp3 $end
$var wire 1 y# temp4 $end
$var wire 1 z# temp5 $end
$var wire 1 {# temp6 $end
$var wire 1 |# temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[6] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 }# a $end
$var wire 1 ~# aADDb $end
$var wire 1 !$ aANDb $end
$var wire 1 "$ aNANDb $end
$var wire 1 #$ aNORb $end
$var wire 1 $$ aORb $end
$var wire 1 %$ aXORb $end
$var wire 1 &$ aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 '$ aXORb_AND_carryin $end
$var wire 1 ($ b $end
$var wire 1 )$ bChoice $end
$var wire 1 *$ bInv $end
$var wire 1 ( bInvert $end
$var wire 1 +$ carryin $end
$var wire 1 ,$ carryout $end
$var wire 3 -$ muxDevice [2:0] $end
$var wire 1 .$ out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 ($ in0 $end
$var wire 1 /$ in0nandnAddr $end
$var wire 1 *$ in1 $end
$var wire 1 0$ in1nandAddr $end
$var wire 1 1$ nAddr $end
$var wire 1 )$ out $end
$upscope $end
$scope module ourXor $end
$var wire 1 2$ AnandB $end
$var wire 1 3$ AnorB $end
$var wire 1 4$ AorB $end
$var wire 1 }# a $end
$var wire 1 )$ b $end
$var wire 1 5$ notXOR $end
$var wire 1 %$ out $end
$upscope $end
$scope module oXOR $end
$var wire 1 6$ AnandB $end
$var wire 1 7$ AnorB $end
$var wire 1 8$ AorB $end
$var wire 1 %$ a $end
$var wire 1 +$ b $end
$var wire 1 9$ notXOR $end
$var wire 1 ~# out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 :$ addr [2:0] $end
$var wire 1 ~# in0 $end
$var wire 1 %$ in1 $end
$var wire 1 ;$ in2 $end
$var wire 1 !$ in3 $end
$var wire 1 "$ in4 $end
$var wire 1 #$ in5 $end
$var wire 1 $$ in6 $end
$var wire 1 !$ in7 $end
$var wire 1 <$ naddr0 $end
$var wire 1 =$ naddr1 $end
$var wire 1 >$ naddr2 $end
$var wire 1 .$ out $end
$var wire 1 ?$ temp0 $end
$var wire 1 @$ temp1 $end
$var wire 1 A$ temp2 $end
$var wire 1 B$ temp3 $end
$var wire 1 C$ temp4 $end
$var wire 1 D$ temp5 $end
$var wire 1 E$ temp6 $end
$var wire 1 F$ temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[7] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 G$ a $end
$var wire 1 H$ aADDb $end
$var wire 1 I$ aANDb $end
$var wire 1 J$ aNANDb $end
$var wire 1 K$ aNORb $end
$var wire 1 L$ aORb $end
$var wire 1 M$ aXORb $end
$var wire 1 N$ aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 O$ aXORb_AND_carryin $end
$var wire 1 P$ b $end
$var wire 1 Q$ bChoice $end
$var wire 1 R$ bInv $end
$var wire 1 ( bInvert $end
$var wire 1 S$ carryin $end
$var wire 1 T$ carryout $end
$var wire 3 U$ muxDevice [2:0] $end
$var wire 1 V$ out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 P$ in0 $end
$var wire 1 W$ in0nandnAddr $end
$var wire 1 R$ in1 $end
$var wire 1 X$ in1nandAddr $end
$var wire 1 Y$ nAddr $end
$var wire 1 Q$ out $end
$upscope $end
$scope module ourXor $end
$var wire 1 Z$ AnandB $end
$var wire 1 [$ AnorB $end
$var wire 1 \$ AorB $end
$var wire 1 G$ a $end
$var wire 1 Q$ b $end
$var wire 1 ]$ notXOR $end
$var wire 1 M$ out $end
$upscope $end
$scope module oXOR $end
$var wire 1 ^$ AnandB $end
$var wire 1 _$ AnorB $end
$var wire 1 `$ AorB $end
$var wire 1 M$ a $end
$var wire 1 S$ b $end
$var wire 1 a$ notXOR $end
$var wire 1 H$ out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 b$ addr [2:0] $end
$var wire 1 H$ in0 $end
$var wire 1 M$ in1 $end
$var wire 1 c$ in2 $end
$var wire 1 I$ in3 $end
$var wire 1 J$ in4 $end
$var wire 1 K$ in5 $end
$var wire 1 L$ in6 $end
$var wire 1 I$ in7 $end
$var wire 1 d$ naddr0 $end
$var wire 1 e$ naddr1 $end
$var wire 1 f$ naddr2 $end
$var wire 1 V$ out $end
$var wire 1 g$ temp0 $end
$var wire 1 h$ temp1 $end
$var wire 1 i$ temp2 $end
$var wire 1 j$ temp3 $end
$var wire 1 k$ temp4 $end
$var wire 1 l$ temp5 $end
$var wire 1 m$ temp6 $end
$var wire 1 n$ temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[8] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 o$ a $end
$var wire 1 p$ aADDb $end
$var wire 1 q$ aANDb $end
$var wire 1 r$ aNANDb $end
$var wire 1 s$ aNORb $end
$var wire 1 t$ aORb $end
$var wire 1 u$ aXORb $end
$var wire 1 v$ aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 w$ aXORb_AND_carryin $end
$var wire 1 x$ b $end
$var wire 1 y$ bChoice $end
$var wire 1 z$ bInv $end
$var wire 1 ( bInvert $end
$var wire 1 {$ carryin $end
$var wire 1 |$ carryout $end
$var wire 3 }$ muxDevice [2:0] $end
$var wire 1 ~$ out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 x$ in0 $end
$var wire 1 !% in0nandnAddr $end
$var wire 1 z$ in1 $end
$var wire 1 "% in1nandAddr $end
$var wire 1 #% nAddr $end
$var wire 1 y$ out $end
$upscope $end
$scope module ourXor $end
$var wire 1 $% AnandB $end
$var wire 1 %% AnorB $end
$var wire 1 &% AorB $end
$var wire 1 o$ a $end
$var wire 1 y$ b $end
$var wire 1 '% notXOR $end
$var wire 1 u$ out $end
$upscope $end
$scope module oXOR $end
$var wire 1 (% AnandB $end
$var wire 1 )% AnorB $end
$var wire 1 *% AorB $end
$var wire 1 u$ a $end
$var wire 1 {$ b $end
$var wire 1 +% notXOR $end
$var wire 1 p$ out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 ,% addr [2:0] $end
$var wire 1 p$ in0 $end
$var wire 1 u$ in1 $end
$var wire 1 -% in2 $end
$var wire 1 q$ in3 $end
$var wire 1 r$ in4 $end
$var wire 1 s$ in5 $end
$var wire 1 t$ in6 $end
$var wire 1 q$ in7 $end
$var wire 1 .% naddr0 $end
$var wire 1 /% naddr1 $end
$var wire 1 0% naddr2 $end
$var wire 1 ~$ out $end
$var wire 1 1% temp0 $end
$var wire 1 2% temp1 $end
$var wire 1 3% temp2 $end
$var wire 1 4% temp3 $end
$var wire 1 5% temp4 $end
$var wire 1 6% temp5 $end
$var wire 1 7% temp6 $end
$var wire 1 8% temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[9] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 9% a $end
$var wire 1 :% aADDb $end
$var wire 1 ;% aANDb $end
$var wire 1 <% aNANDb $end
$var wire 1 =% aNORb $end
$var wire 1 >% aORb $end
$var wire 1 ?% aXORb $end
$var wire 1 @% aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 A% aXORb_AND_carryin $end
$var wire 1 B% b $end
$var wire 1 C% bChoice $end
$var wire 1 D% bInv $end
$var wire 1 ( bInvert $end
$var wire 1 E% carryin $end
$var wire 1 F% carryout $end
$var wire 3 G% muxDevice [2:0] $end
$var wire 1 H% out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 B% in0 $end
$var wire 1 I% in0nandnAddr $end
$var wire 1 D% in1 $end
$var wire 1 J% in1nandAddr $end
$var wire 1 K% nAddr $end
$var wire 1 C% out $end
$upscope $end
$scope module ourXor $end
$var wire 1 L% AnandB $end
$var wire 1 M% AnorB $end
$var wire 1 N% AorB $end
$var wire 1 9% a $end
$var wire 1 C% b $end
$var wire 1 O% notXOR $end
$var wire 1 ?% out $end
$upscope $end
$scope module oXOR $end
$var wire 1 P% AnandB $end
$var wire 1 Q% AnorB $end
$var wire 1 R% AorB $end
$var wire 1 ?% a $end
$var wire 1 E% b $end
$var wire 1 S% notXOR $end
$var wire 1 :% out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 T% addr [2:0] $end
$var wire 1 :% in0 $end
$var wire 1 ?% in1 $end
$var wire 1 U% in2 $end
$var wire 1 ;% in3 $end
$var wire 1 <% in4 $end
$var wire 1 =% in5 $end
$var wire 1 >% in6 $end
$var wire 1 ;% in7 $end
$var wire 1 V% naddr0 $end
$var wire 1 W% naddr1 $end
$var wire 1 X% naddr2 $end
$var wire 1 H% out $end
$var wire 1 Y% temp0 $end
$var wire 1 Z% temp1 $end
$var wire 1 [% temp2 $end
$var wire 1 \% temp3 $end
$var wire 1 ]% temp4 $end
$var wire 1 ^% temp5 $end
$var wire 1 _% temp6 $end
$var wire 1 `% temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[10] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 a% a $end
$var wire 1 b% aADDb $end
$var wire 1 c% aANDb $end
$var wire 1 d% aNANDb $end
$var wire 1 e% aNORb $end
$var wire 1 f% aORb $end
$var wire 1 g% aXORb $end
$var wire 1 h% aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 i% aXORb_AND_carryin $end
$var wire 1 j% b $end
$var wire 1 k% bChoice $end
$var wire 1 l% bInv $end
$var wire 1 ( bInvert $end
$var wire 1 m% carryin $end
$var wire 1 n% carryout $end
$var wire 3 o% muxDevice [2:0] $end
$var wire 1 p% out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 j% in0 $end
$var wire 1 q% in0nandnAddr $end
$var wire 1 l% in1 $end
$var wire 1 r% in1nandAddr $end
$var wire 1 s% nAddr $end
$var wire 1 k% out $end
$upscope $end
$scope module ourXor $end
$var wire 1 t% AnandB $end
$var wire 1 u% AnorB $end
$var wire 1 v% AorB $end
$var wire 1 a% a $end
$var wire 1 k% b $end
$var wire 1 w% notXOR $end
$var wire 1 g% out $end
$upscope $end
$scope module oXOR $end
$var wire 1 x% AnandB $end
$var wire 1 y% AnorB $end
$var wire 1 z% AorB $end
$var wire 1 g% a $end
$var wire 1 m% b $end
$var wire 1 {% notXOR $end
$var wire 1 b% out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 |% addr [2:0] $end
$var wire 1 b% in0 $end
$var wire 1 g% in1 $end
$var wire 1 }% in2 $end
$var wire 1 c% in3 $end
$var wire 1 d% in4 $end
$var wire 1 e% in5 $end
$var wire 1 f% in6 $end
$var wire 1 c% in7 $end
$var wire 1 ~% naddr0 $end
$var wire 1 !& naddr1 $end
$var wire 1 "& naddr2 $end
$var wire 1 p% out $end
$var wire 1 #& temp0 $end
$var wire 1 $& temp1 $end
$var wire 1 %& temp2 $end
$var wire 1 && temp3 $end
$var wire 1 '& temp4 $end
$var wire 1 (& temp5 $end
$var wire 1 )& temp6 $end
$var wire 1 *& temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[11] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 +& a $end
$var wire 1 ,& aADDb $end
$var wire 1 -& aANDb $end
$var wire 1 .& aNANDb $end
$var wire 1 /& aNORb $end
$var wire 1 0& aORb $end
$var wire 1 1& aXORb $end
$var wire 1 2& aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 3& aXORb_AND_carryin $end
$var wire 1 4& b $end
$var wire 1 5& bChoice $end
$var wire 1 6& bInv $end
$var wire 1 ( bInvert $end
$var wire 1 7& carryin $end
$var wire 1 8& carryout $end
$var wire 3 9& muxDevice [2:0] $end
$var wire 1 :& out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 4& in0 $end
$var wire 1 ;& in0nandnAddr $end
$var wire 1 6& in1 $end
$var wire 1 <& in1nandAddr $end
$var wire 1 =& nAddr $end
$var wire 1 5& out $end
$upscope $end
$scope module ourXor $end
$var wire 1 >& AnandB $end
$var wire 1 ?& AnorB $end
$var wire 1 @& AorB $end
$var wire 1 +& a $end
$var wire 1 5& b $end
$var wire 1 A& notXOR $end
$var wire 1 1& out $end
$upscope $end
$scope module oXOR $end
$var wire 1 B& AnandB $end
$var wire 1 C& AnorB $end
$var wire 1 D& AorB $end
$var wire 1 1& a $end
$var wire 1 7& b $end
$var wire 1 E& notXOR $end
$var wire 1 ,& out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 F& addr [2:0] $end
$var wire 1 ,& in0 $end
$var wire 1 1& in1 $end
$var wire 1 G& in2 $end
$var wire 1 -& in3 $end
$var wire 1 .& in4 $end
$var wire 1 /& in5 $end
$var wire 1 0& in6 $end
$var wire 1 -& in7 $end
$var wire 1 H& naddr0 $end
$var wire 1 I& naddr1 $end
$var wire 1 J& naddr2 $end
$var wire 1 :& out $end
$var wire 1 K& temp0 $end
$var wire 1 L& temp1 $end
$var wire 1 M& temp2 $end
$var wire 1 N& temp3 $end
$var wire 1 O& temp4 $end
$var wire 1 P& temp5 $end
$var wire 1 Q& temp6 $end
$var wire 1 R& temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[12] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 S& a $end
$var wire 1 T& aADDb $end
$var wire 1 U& aANDb $end
$var wire 1 V& aNANDb $end
$var wire 1 W& aNORb $end
$var wire 1 X& aORb $end
$var wire 1 Y& aXORb $end
$var wire 1 Z& aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 [& aXORb_AND_carryin $end
$var wire 1 \& b $end
$var wire 1 ]& bChoice $end
$var wire 1 ^& bInv $end
$var wire 1 ( bInvert $end
$var wire 1 _& carryin $end
$var wire 1 `& carryout $end
$var wire 3 a& muxDevice [2:0] $end
$var wire 1 b& out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 \& in0 $end
$var wire 1 c& in0nandnAddr $end
$var wire 1 ^& in1 $end
$var wire 1 d& in1nandAddr $end
$var wire 1 e& nAddr $end
$var wire 1 ]& out $end
$upscope $end
$scope module ourXor $end
$var wire 1 f& AnandB $end
$var wire 1 g& AnorB $end
$var wire 1 h& AorB $end
$var wire 1 S& a $end
$var wire 1 ]& b $end
$var wire 1 i& notXOR $end
$var wire 1 Y& out $end
$upscope $end
$scope module oXOR $end
$var wire 1 j& AnandB $end
$var wire 1 k& AnorB $end
$var wire 1 l& AorB $end
$var wire 1 Y& a $end
$var wire 1 _& b $end
$var wire 1 m& notXOR $end
$var wire 1 T& out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 n& addr [2:0] $end
$var wire 1 T& in0 $end
$var wire 1 Y& in1 $end
$var wire 1 o& in2 $end
$var wire 1 U& in3 $end
$var wire 1 V& in4 $end
$var wire 1 W& in5 $end
$var wire 1 X& in6 $end
$var wire 1 U& in7 $end
$var wire 1 p& naddr0 $end
$var wire 1 q& naddr1 $end
$var wire 1 r& naddr2 $end
$var wire 1 b& out $end
$var wire 1 s& temp0 $end
$var wire 1 t& temp1 $end
$var wire 1 u& temp2 $end
$var wire 1 v& temp3 $end
$var wire 1 w& temp4 $end
$var wire 1 x& temp5 $end
$var wire 1 y& temp6 $end
$var wire 1 z& temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[13] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 {& a $end
$var wire 1 |& aADDb $end
$var wire 1 }& aANDb $end
$var wire 1 ~& aNANDb $end
$var wire 1 !' aNORb $end
$var wire 1 "' aORb $end
$var wire 1 #' aXORb $end
$var wire 1 $' aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 %' aXORb_AND_carryin $end
$var wire 1 &' b $end
$var wire 1 '' bChoice $end
$var wire 1 (' bInv $end
$var wire 1 ( bInvert $end
$var wire 1 )' carryin $end
$var wire 1 *' carryout $end
$var wire 3 +' muxDevice [2:0] $end
$var wire 1 ,' out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 &' in0 $end
$var wire 1 -' in0nandnAddr $end
$var wire 1 (' in1 $end
$var wire 1 .' in1nandAddr $end
$var wire 1 /' nAddr $end
$var wire 1 '' out $end
$upscope $end
$scope module ourXor $end
$var wire 1 0' AnandB $end
$var wire 1 1' AnorB $end
$var wire 1 2' AorB $end
$var wire 1 {& a $end
$var wire 1 '' b $end
$var wire 1 3' notXOR $end
$var wire 1 #' out $end
$upscope $end
$scope module oXOR $end
$var wire 1 4' AnandB $end
$var wire 1 5' AnorB $end
$var wire 1 6' AorB $end
$var wire 1 #' a $end
$var wire 1 )' b $end
$var wire 1 7' notXOR $end
$var wire 1 |& out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 8' addr [2:0] $end
$var wire 1 |& in0 $end
$var wire 1 #' in1 $end
$var wire 1 9' in2 $end
$var wire 1 }& in3 $end
$var wire 1 ~& in4 $end
$var wire 1 !' in5 $end
$var wire 1 "' in6 $end
$var wire 1 }& in7 $end
$var wire 1 :' naddr0 $end
$var wire 1 ;' naddr1 $end
$var wire 1 <' naddr2 $end
$var wire 1 ,' out $end
$var wire 1 =' temp0 $end
$var wire 1 >' temp1 $end
$var wire 1 ?' temp2 $end
$var wire 1 @' temp3 $end
$var wire 1 A' temp4 $end
$var wire 1 B' temp5 $end
$var wire 1 C' temp6 $end
$var wire 1 D' temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[14] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 E' a $end
$var wire 1 F' aADDb $end
$var wire 1 G' aANDb $end
$var wire 1 H' aNANDb $end
$var wire 1 I' aNORb $end
$var wire 1 J' aORb $end
$var wire 1 K' aXORb $end
$var wire 1 L' aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 M' aXORb_AND_carryin $end
$var wire 1 N' b $end
$var wire 1 O' bChoice $end
$var wire 1 P' bInv $end
$var wire 1 ( bInvert $end
$var wire 1 Q' carryin $end
$var wire 1 R' carryout $end
$var wire 3 S' muxDevice [2:0] $end
$var wire 1 T' out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 N' in0 $end
$var wire 1 U' in0nandnAddr $end
$var wire 1 P' in1 $end
$var wire 1 V' in1nandAddr $end
$var wire 1 W' nAddr $end
$var wire 1 O' out $end
$upscope $end
$scope module ourXor $end
$var wire 1 X' AnandB $end
$var wire 1 Y' AnorB $end
$var wire 1 Z' AorB $end
$var wire 1 E' a $end
$var wire 1 O' b $end
$var wire 1 [' notXOR $end
$var wire 1 K' out $end
$upscope $end
$scope module oXOR $end
$var wire 1 \' AnandB $end
$var wire 1 ]' AnorB $end
$var wire 1 ^' AorB $end
$var wire 1 K' a $end
$var wire 1 Q' b $end
$var wire 1 _' notXOR $end
$var wire 1 F' out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 `' addr [2:0] $end
$var wire 1 F' in0 $end
$var wire 1 K' in1 $end
$var wire 1 a' in2 $end
$var wire 1 G' in3 $end
$var wire 1 H' in4 $end
$var wire 1 I' in5 $end
$var wire 1 J' in6 $end
$var wire 1 G' in7 $end
$var wire 1 b' naddr0 $end
$var wire 1 c' naddr1 $end
$var wire 1 d' naddr2 $end
$var wire 1 T' out $end
$var wire 1 e' temp0 $end
$var wire 1 f' temp1 $end
$var wire 1 g' temp2 $end
$var wire 1 h' temp3 $end
$var wire 1 i' temp4 $end
$var wire 1 j' temp5 $end
$var wire 1 k' temp6 $end
$var wire 1 l' temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[15] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 m' a $end
$var wire 1 n' aADDb $end
$var wire 1 o' aANDb $end
$var wire 1 p' aNANDb $end
$var wire 1 q' aNORb $end
$var wire 1 r' aORb $end
$var wire 1 s' aXORb $end
$var wire 1 t' aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 u' aXORb_AND_carryin $end
$var wire 1 v' b $end
$var wire 1 w' bChoice $end
$var wire 1 x' bInv $end
$var wire 1 ( bInvert $end
$var wire 1 y' carryin $end
$var wire 1 z' carryout $end
$var wire 3 {' muxDevice [2:0] $end
$var wire 1 |' out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 v' in0 $end
$var wire 1 }' in0nandnAddr $end
$var wire 1 x' in1 $end
$var wire 1 ~' in1nandAddr $end
$var wire 1 !( nAddr $end
$var wire 1 w' out $end
$upscope $end
$scope module ourXor $end
$var wire 1 "( AnandB $end
$var wire 1 #( AnorB $end
$var wire 1 $( AorB $end
$var wire 1 m' a $end
$var wire 1 w' b $end
$var wire 1 %( notXOR $end
$var wire 1 s' out $end
$upscope $end
$scope module oXOR $end
$var wire 1 &( AnandB $end
$var wire 1 '( AnorB $end
$var wire 1 (( AorB $end
$var wire 1 s' a $end
$var wire 1 y' b $end
$var wire 1 )( notXOR $end
$var wire 1 n' out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 *( addr [2:0] $end
$var wire 1 n' in0 $end
$var wire 1 s' in1 $end
$var wire 1 +( in2 $end
$var wire 1 o' in3 $end
$var wire 1 p' in4 $end
$var wire 1 q' in5 $end
$var wire 1 r' in6 $end
$var wire 1 o' in7 $end
$var wire 1 ,( naddr0 $end
$var wire 1 -( naddr1 $end
$var wire 1 .( naddr2 $end
$var wire 1 |' out $end
$var wire 1 /( temp0 $end
$var wire 1 0( temp1 $end
$var wire 1 1( temp2 $end
$var wire 1 2( temp3 $end
$var wire 1 3( temp4 $end
$var wire 1 4( temp5 $end
$var wire 1 5( temp6 $end
$var wire 1 6( temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[16] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 7( a $end
$var wire 1 8( aADDb $end
$var wire 1 9( aANDb $end
$var wire 1 :( aNANDb $end
$var wire 1 ;( aNORb $end
$var wire 1 <( aORb $end
$var wire 1 =( aXORb $end
$var wire 1 >( aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 ?( aXORb_AND_carryin $end
$var wire 1 @( b $end
$var wire 1 A( bChoice $end
$var wire 1 B( bInv $end
$var wire 1 ( bInvert $end
$var wire 1 C( carryin $end
$var wire 1 D( carryout $end
$var wire 3 E( muxDevice [2:0] $end
$var wire 1 F( out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 @( in0 $end
$var wire 1 G( in0nandnAddr $end
$var wire 1 B( in1 $end
$var wire 1 H( in1nandAddr $end
$var wire 1 I( nAddr $end
$var wire 1 A( out $end
$upscope $end
$scope module ourXor $end
$var wire 1 J( AnandB $end
$var wire 1 K( AnorB $end
$var wire 1 L( AorB $end
$var wire 1 7( a $end
$var wire 1 A( b $end
$var wire 1 M( notXOR $end
$var wire 1 =( out $end
$upscope $end
$scope module oXOR $end
$var wire 1 N( AnandB $end
$var wire 1 O( AnorB $end
$var wire 1 P( AorB $end
$var wire 1 =( a $end
$var wire 1 C( b $end
$var wire 1 Q( notXOR $end
$var wire 1 8( out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 R( addr [2:0] $end
$var wire 1 8( in0 $end
$var wire 1 =( in1 $end
$var wire 1 S( in2 $end
$var wire 1 9( in3 $end
$var wire 1 :( in4 $end
$var wire 1 ;( in5 $end
$var wire 1 <( in6 $end
$var wire 1 9( in7 $end
$var wire 1 T( naddr0 $end
$var wire 1 U( naddr1 $end
$var wire 1 V( naddr2 $end
$var wire 1 F( out $end
$var wire 1 W( temp0 $end
$var wire 1 X( temp1 $end
$var wire 1 Y( temp2 $end
$var wire 1 Z( temp3 $end
$var wire 1 [( temp4 $end
$var wire 1 \( temp5 $end
$var wire 1 ]( temp6 $end
$var wire 1 ^( temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[17] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 _( a $end
$var wire 1 `( aADDb $end
$var wire 1 a( aANDb $end
$var wire 1 b( aNANDb $end
$var wire 1 c( aNORb $end
$var wire 1 d( aORb $end
$var wire 1 e( aXORb $end
$var wire 1 f( aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 g( aXORb_AND_carryin $end
$var wire 1 h( b $end
$var wire 1 i( bChoice $end
$var wire 1 j( bInv $end
$var wire 1 ( bInvert $end
$var wire 1 k( carryin $end
$var wire 1 l( carryout $end
$var wire 3 m( muxDevice [2:0] $end
$var wire 1 n( out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 h( in0 $end
$var wire 1 o( in0nandnAddr $end
$var wire 1 j( in1 $end
$var wire 1 p( in1nandAddr $end
$var wire 1 q( nAddr $end
$var wire 1 i( out $end
$upscope $end
$scope module ourXor $end
$var wire 1 r( AnandB $end
$var wire 1 s( AnorB $end
$var wire 1 t( AorB $end
$var wire 1 _( a $end
$var wire 1 i( b $end
$var wire 1 u( notXOR $end
$var wire 1 e( out $end
$upscope $end
$scope module oXOR $end
$var wire 1 v( AnandB $end
$var wire 1 w( AnorB $end
$var wire 1 x( AorB $end
$var wire 1 e( a $end
$var wire 1 k( b $end
$var wire 1 y( notXOR $end
$var wire 1 `( out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 z( addr [2:0] $end
$var wire 1 `( in0 $end
$var wire 1 e( in1 $end
$var wire 1 {( in2 $end
$var wire 1 a( in3 $end
$var wire 1 b( in4 $end
$var wire 1 c( in5 $end
$var wire 1 d( in6 $end
$var wire 1 a( in7 $end
$var wire 1 |( naddr0 $end
$var wire 1 }( naddr1 $end
$var wire 1 ~( naddr2 $end
$var wire 1 n( out $end
$var wire 1 !) temp0 $end
$var wire 1 ") temp1 $end
$var wire 1 #) temp2 $end
$var wire 1 $) temp3 $end
$var wire 1 %) temp4 $end
$var wire 1 &) temp5 $end
$var wire 1 ') temp6 $end
$var wire 1 () temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[18] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 )) a $end
$var wire 1 *) aADDb $end
$var wire 1 +) aANDb $end
$var wire 1 ,) aNANDb $end
$var wire 1 -) aNORb $end
$var wire 1 .) aORb $end
$var wire 1 /) aXORb $end
$var wire 1 0) aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 1) aXORb_AND_carryin $end
$var wire 1 2) b $end
$var wire 1 3) bChoice $end
$var wire 1 4) bInv $end
$var wire 1 ( bInvert $end
$var wire 1 5) carryin $end
$var wire 1 6) carryout $end
$var wire 3 7) muxDevice [2:0] $end
$var wire 1 8) out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 2) in0 $end
$var wire 1 9) in0nandnAddr $end
$var wire 1 4) in1 $end
$var wire 1 :) in1nandAddr $end
$var wire 1 ;) nAddr $end
$var wire 1 3) out $end
$upscope $end
$scope module ourXor $end
$var wire 1 <) AnandB $end
$var wire 1 =) AnorB $end
$var wire 1 >) AorB $end
$var wire 1 )) a $end
$var wire 1 3) b $end
$var wire 1 ?) notXOR $end
$var wire 1 /) out $end
$upscope $end
$scope module oXOR $end
$var wire 1 @) AnandB $end
$var wire 1 A) AnorB $end
$var wire 1 B) AorB $end
$var wire 1 /) a $end
$var wire 1 5) b $end
$var wire 1 C) notXOR $end
$var wire 1 *) out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 D) addr [2:0] $end
$var wire 1 *) in0 $end
$var wire 1 /) in1 $end
$var wire 1 E) in2 $end
$var wire 1 +) in3 $end
$var wire 1 ,) in4 $end
$var wire 1 -) in5 $end
$var wire 1 .) in6 $end
$var wire 1 +) in7 $end
$var wire 1 F) naddr0 $end
$var wire 1 G) naddr1 $end
$var wire 1 H) naddr2 $end
$var wire 1 8) out $end
$var wire 1 I) temp0 $end
$var wire 1 J) temp1 $end
$var wire 1 K) temp2 $end
$var wire 1 L) temp3 $end
$var wire 1 M) temp4 $end
$var wire 1 N) temp5 $end
$var wire 1 O) temp6 $end
$var wire 1 P) temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[19] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 Q) a $end
$var wire 1 R) aADDb $end
$var wire 1 S) aANDb $end
$var wire 1 T) aNANDb $end
$var wire 1 U) aNORb $end
$var wire 1 V) aORb $end
$var wire 1 W) aXORb $end
$var wire 1 X) aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 Y) aXORb_AND_carryin $end
$var wire 1 Z) b $end
$var wire 1 [) bChoice $end
$var wire 1 \) bInv $end
$var wire 1 ( bInvert $end
$var wire 1 ]) carryin $end
$var wire 1 ^) carryout $end
$var wire 3 _) muxDevice [2:0] $end
$var wire 1 `) out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 Z) in0 $end
$var wire 1 a) in0nandnAddr $end
$var wire 1 \) in1 $end
$var wire 1 b) in1nandAddr $end
$var wire 1 c) nAddr $end
$var wire 1 [) out $end
$upscope $end
$scope module ourXor $end
$var wire 1 d) AnandB $end
$var wire 1 e) AnorB $end
$var wire 1 f) AorB $end
$var wire 1 Q) a $end
$var wire 1 [) b $end
$var wire 1 g) notXOR $end
$var wire 1 W) out $end
$upscope $end
$scope module oXOR $end
$var wire 1 h) AnandB $end
$var wire 1 i) AnorB $end
$var wire 1 j) AorB $end
$var wire 1 W) a $end
$var wire 1 ]) b $end
$var wire 1 k) notXOR $end
$var wire 1 R) out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 l) addr [2:0] $end
$var wire 1 R) in0 $end
$var wire 1 W) in1 $end
$var wire 1 m) in2 $end
$var wire 1 S) in3 $end
$var wire 1 T) in4 $end
$var wire 1 U) in5 $end
$var wire 1 V) in6 $end
$var wire 1 S) in7 $end
$var wire 1 n) naddr0 $end
$var wire 1 o) naddr1 $end
$var wire 1 p) naddr2 $end
$var wire 1 `) out $end
$var wire 1 q) temp0 $end
$var wire 1 r) temp1 $end
$var wire 1 s) temp2 $end
$var wire 1 t) temp3 $end
$var wire 1 u) temp4 $end
$var wire 1 v) temp5 $end
$var wire 1 w) temp6 $end
$var wire 1 x) temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[20] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 y) a $end
$var wire 1 z) aADDb $end
$var wire 1 {) aANDb $end
$var wire 1 |) aNANDb $end
$var wire 1 }) aNORb $end
$var wire 1 ~) aORb $end
$var wire 1 !* aXORb $end
$var wire 1 "* aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 #* aXORb_AND_carryin $end
$var wire 1 $* b $end
$var wire 1 %* bChoice $end
$var wire 1 &* bInv $end
$var wire 1 ( bInvert $end
$var wire 1 '* carryin $end
$var wire 1 (* carryout $end
$var wire 3 )* muxDevice [2:0] $end
$var wire 1 ** out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 $* in0 $end
$var wire 1 +* in0nandnAddr $end
$var wire 1 &* in1 $end
$var wire 1 ,* in1nandAddr $end
$var wire 1 -* nAddr $end
$var wire 1 %* out $end
$upscope $end
$scope module ourXor $end
$var wire 1 .* AnandB $end
$var wire 1 /* AnorB $end
$var wire 1 0* AorB $end
$var wire 1 y) a $end
$var wire 1 %* b $end
$var wire 1 1* notXOR $end
$var wire 1 !* out $end
$upscope $end
$scope module oXOR $end
$var wire 1 2* AnandB $end
$var wire 1 3* AnorB $end
$var wire 1 4* AorB $end
$var wire 1 !* a $end
$var wire 1 '* b $end
$var wire 1 5* notXOR $end
$var wire 1 z) out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 6* addr [2:0] $end
$var wire 1 z) in0 $end
$var wire 1 !* in1 $end
$var wire 1 7* in2 $end
$var wire 1 {) in3 $end
$var wire 1 |) in4 $end
$var wire 1 }) in5 $end
$var wire 1 ~) in6 $end
$var wire 1 {) in7 $end
$var wire 1 8* naddr0 $end
$var wire 1 9* naddr1 $end
$var wire 1 :* naddr2 $end
$var wire 1 ** out $end
$var wire 1 ;* temp0 $end
$var wire 1 <* temp1 $end
$var wire 1 =* temp2 $end
$var wire 1 >* temp3 $end
$var wire 1 ?* temp4 $end
$var wire 1 @* temp5 $end
$var wire 1 A* temp6 $end
$var wire 1 B* temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[21] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 C* a $end
$var wire 1 D* aADDb $end
$var wire 1 E* aANDb $end
$var wire 1 F* aNANDb $end
$var wire 1 G* aNORb $end
$var wire 1 H* aORb $end
$var wire 1 I* aXORb $end
$var wire 1 J* aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 K* aXORb_AND_carryin $end
$var wire 1 L* b $end
$var wire 1 M* bChoice $end
$var wire 1 N* bInv $end
$var wire 1 ( bInvert $end
$var wire 1 O* carryin $end
$var wire 1 P* carryout $end
$var wire 3 Q* muxDevice [2:0] $end
$var wire 1 R* out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 L* in0 $end
$var wire 1 S* in0nandnAddr $end
$var wire 1 N* in1 $end
$var wire 1 T* in1nandAddr $end
$var wire 1 U* nAddr $end
$var wire 1 M* out $end
$upscope $end
$scope module ourXor $end
$var wire 1 V* AnandB $end
$var wire 1 W* AnorB $end
$var wire 1 X* AorB $end
$var wire 1 C* a $end
$var wire 1 M* b $end
$var wire 1 Y* notXOR $end
$var wire 1 I* out $end
$upscope $end
$scope module oXOR $end
$var wire 1 Z* AnandB $end
$var wire 1 [* AnorB $end
$var wire 1 \* AorB $end
$var wire 1 I* a $end
$var wire 1 O* b $end
$var wire 1 ]* notXOR $end
$var wire 1 D* out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 ^* addr [2:0] $end
$var wire 1 D* in0 $end
$var wire 1 I* in1 $end
$var wire 1 _* in2 $end
$var wire 1 E* in3 $end
$var wire 1 F* in4 $end
$var wire 1 G* in5 $end
$var wire 1 H* in6 $end
$var wire 1 E* in7 $end
$var wire 1 `* naddr0 $end
$var wire 1 a* naddr1 $end
$var wire 1 b* naddr2 $end
$var wire 1 R* out $end
$var wire 1 c* temp0 $end
$var wire 1 d* temp1 $end
$var wire 1 e* temp2 $end
$var wire 1 f* temp3 $end
$var wire 1 g* temp4 $end
$var wire 1 h* temp5 $end
$var wire 1 i* temp6 $end
$var wire 1 j* temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[22] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 k* a $end
$var wire 1 l* aADDb $end
$var wire 1 m* aANDb $end
$var wire 1 n* aNANDb $end
$var wire 1 o* aNORb $end
$var wire 1 p* aORb $end
$var wire 1 q* aXORb $end
$var wire 1 r* aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 s* aXORb_AND_carryin $end
$var wire 1 t* b $end
$var wire 1 u* bChoice $end
$var wire 1 v* bInv $end
$var wire 1 ( bInvert $end
$var wire 1 w* carryin $end
$var wire 1 x* carryout $end
$var wire 3 y* muxDevice [2:0] $end
$var wire 1 z* out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 t* in0 $end
$var wire 1 {* in0nandnAddr $end
$var wire 1 v* in1 $end
$var wire 1 |* in1nandAddr $end
$var wire 1 }* nAddr $end
$var wire 1 u* out $end
$upscope $end
$scope module ourXor $end
$var wire 1 ~* AnandB $end
$var wire 1 !+ AnorB $end
$var wire 1 "+ AorB $end
$var wire 1 k* a $end
$var wire 1 u* b $end
$var wire 1 #+ notXOR $end
$var wire 1 q* out $end
$upscope $end
$scope module oXOR $end
$var wire 1 $+ AnandB $end
$var wire 1 %+ AnorB $end
$var wire 1 &+ AorB $end
$var wire 1 q* a $end
$var wire 1 w* b $end
$var wire 1 '+ notXOR $end
$var wire 1 l* out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 (+ addr [2:0] $end
$var wire 1 l* in0 $end
$var wire 1 q* in1 $end
$var wire 1 )+ in2 $end
$var wire 1 m* in3 $end
$var wire 1 n* in4 $end
$var wire 1 o* in5 $end
$var wire 1 p* in6 $end
$var wire 1 m* in7 $end
$var wire 1 *+ naddr0 $end
$var wire 1 ++ naddr1 $end
$var wire 1 ,+ naddr2 $end
$var wire 1 z* out $end
$var wire 1 -+ temp0 $end
$var wire 1 .+ temp1 $end
$var wire 1 /+ temp2 $end
$var wire 1 0+ temp3 $end
$var wire 1 1+ temp4 $end
$var wire 1 2+ temp5 $end
$var wire 1 3+ temp6 $end
$var wire 1 4+ temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[23] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 5+ a $end
$var wire 1 6+ aADDb $end
$var wire 1 7+ aANDb $end
$var wire 1 8+ aNANDb $end
$var wire 1 9+ aNORb $end
$var wire 1 :+ aORb $end
$var wire 1 ;+ aXORb $end
$var wire 1 <+ aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 =+ aXORb_AND_carryin $end
$var wire 1 >+ b $end
$var wire 1 ?+ bChoice $end
$var wire 1 @+ bInv $end
$var wire 1 ( bInvert $end
$var wire 1 A+ carryin $end
$var wire 1 B+ carryout $end
$var wire 3 C+ muxDevice [2:0] $end
$var wire 1 D+ out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 >+ in0 $end
$var wire 1 E+ in0nandnAddr $end
$var wire 1 @+ in1 $end
$var wire 1 F+ in1nandAddr $end
$var wire 1 G+ nAddr $end
$var wire 1 ?+ out $end
$upscope $end
$scope module ourXor $end
$var wire 1 H+ AnandB $end
$var wire 1 I+ AnorB $end
$var wire 1 J+ AorB $end
$var wire 1 5+ a $end
$var wire 1 ?+ b $end
$var wire 1 K+ notXOR $end
$var wire 1 ;+ out $end
$upscope $end
$scope module oXOR $end
$var wire 1 L+ AnandB $end
$var wire 1 M+ AnorB $end
$var wire 1 N+ AorB $end
$var wire 1 ;+ a $end
$var wire 1 A+ b $end
$var wire 1 O+ notXOR $end
$var wire 1 6+ out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 P+ addr [2:0] $end
$var wire 1 6+ in0 $end
$var wire 1 ;+ in1 $end
$var wire 1 Q+ in2 $end
$var wire 1 7+ in3 $end
$var wire 1 8+ in4 $end
$var wire 1 9+ in5 $end
$var wire 1 :+ in6 $end
$var wire 1 7+ in7 $end
$var wire 1 R+ naddr0 $end
$var wire 1 S+ naddr1 $end
$var wire 1 T+ naddr2 $end
$var wire 1 D+ out $end
$var wire 1 U+ temp0 $end
$var wire 1 V+ temp1 $end
$var wire 1 W+ temp2 $end
$var wire 1 X+ temp3 $end
$var wire 1 Y+ temp4 $end
$var wire 1 Z+ temp5 $end
$var wire 1 [+ temp6 $end
$var wire 1 \+ temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[24] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 ]+ a $end
$var wire 1 ^+ aADDb $end
$var wire 1 _+ aANDb $end
$var wire 1 `+ aNANDb $end
$var wire 1 a+ aNORb $end
$var wire 1 b+ aORb $end
$var wire 1 c+ aXORb $end
$var wire 1 d+ aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 e+ aXORb_AND_carryin $end
$var wire 1 f+ b $end
$var wire 1 g+ bChoice $end
$var wire 1 h+ bInv $end
$var wire 1 ( bInvert $end
$var wire 1 i+ carryin $end
$var wire 1 j+ carryout $end
$var wire 3 k+ muxDevice [2:0] $end
$var wire 1 l+ out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 f+ in0 $end
$var wire 1 m+ in0nandnAddr $end
$var wire 1 h+ in1 $end
$var wire 1 n+ in1nandAddr $end
$var wire 1 o+ nAddr $end
$var wire 1 g+ out $end
$upscope $end
$scope module ourXor $end
$var wire 1 p+ AnandB $end
$var wire 1 q+ AnorB $end
$var wire 1 r+ AorB $end
$var wire 1 ]+ a $end
$var wire 1 g+ b $end
$var wire 1 s+ notXOR $end
$var wire 1 c+ out $end
$upscope $end
$scope module oXOR $end
$var wire 1 t+ AnandB $end
$var wire 1 u+ AnorB $end
$var wire 1 v+ AorB $end
$var wire 1 c+ a $end
$var wire 1 i+ b $end
$var wire 1 w+ notXOR $end
$var wire 1 ^+ out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 x+ addr [2:0] $end
$var wire 1 ^+ in0 $end
$var wire 1 c+ in1 $end
$var wire 1 y+ in2 $end
$var wire 1 _+ in3 $end
$var wire 1 `+ in4 $end
$var wire 1 a+ in5 $end
$var wire 1 b+ in6 $end
$var wire 1 _+ in7 $end
$var wire 1 z+ naddr0 $end
$var wire 1 {+ naddr1 $end
$var wire 1 |+ naddr2 $end
$var wire 1 l+ out $end
$var wire 1 }+ temp0 $end
$var wire 1 ~+ temp1 $end
$var wire 1 !, temp2 $end
$var wire 1 ", temp3 $end
$var wire 1 #, temp4 $end
$var wire 1 $, temp5 $end
$var wire 1 %, temp6 $end
$var wire 1 &, temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[25] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 ', a $end
$var wire 1 (, aADDb $end
$var wire 1 ), aANDb $end
$var wire 1 *, aNANDb $end
$var wire 1 +, aNORb $end
$var wire 1 ,, aORb $end
$var wire 1 -, aXORb $end
$var wire 1 ., aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 /, aXORb_AND_carryin $end
$var wire 1 0, b $end
$var wire 1 1, bChoice $end
$var wire 1 2, bInv $end
$var wire 1 ( bInvert $end
$var wire 1 3, carryin $end
$var wire 1 4, carryout $end
$var wire 3 5, muxDevice [2:0] $end
$var wire 1 6, out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 0, in0 $end
$var wire 1 7, in0nandnAddr $end
$var wire 1 2, in1 $end
$var wire 1 8, in1nandAddr $end
$var wire 1 9, nAddr $end
$var wire 1 1, out $end
$upscope $end
$scope module ourXor $end
$var wire 1 :, AnandB $end
$var wire 1 ;, AnorB $end
$var wire 1 <, AorB $end
$var wire 1 ', a $end
$var wire 1 1, b $end
$var wire 1 =, notXOR $end
$var wire 1 -, out $end
$upscope $end
$scope module oXOR $end
$var wire 1 >, AnandB $end
$var wire 1 ?, AnorB $end
$var wire 1 @, AorB $end
$var wire 1 -, a $end
$var wire 1 3, b $end
$var wire 1 A, notXOR $end
$var wire 1 (, out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 B, addr [2:0] $end
$var wire 1 (, in0 $end
$var wire 1 -, in1 $end
$var wire 1 C, in2 $end
$var wire 1 ), in3 $end
$var wire 1 *, in4 $end
$var wire 1 +, in5 $end
$var wire 1 ,, in6 $end
$var wire 1 ), in7 $end
$var wire 1 D, naddr0 $end
$var wire 1 E, naddr1 $end
$var wire 1 F, naddr2 $end
$var wire 1 6, out $end
$var wire 1 G, temp0 $end
$var wire 1 H, temp1 $end
$var wire 1 I, temp2 $end
$var wire 1 J, temp3 $end
$var wire 1 K, temp4 $end
$var wire 1 L, temp5 $end
$var wire 1 M, temp6 $end
$var wire 1 N, temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[26] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 O, a $end
$var wire 1 P, aADDb $end
$var wire 1 Q, aANDb $end
$var wire 1 R, aNANDb $end
$var wire 1 S, aNORb $end
$var wire 1 T, aORb $end
$var wire 1 U, aXORb $end
$var wire 1 V, aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 W, aXORb_AND_carryin $end
$var wire 1 X, b $end
$var wire 1 Y, bChoice $end
$var wire 1 Z, bInv $end
$var wire 1 ( bInvert $end
$var wire 1 [, carryin $end
$var wire 1 \, carryout $end
$var wire 3 ], muxDevice [2:0] $end
$var wire 1 ^, out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 X, in0 $end
$var wire 1 _, in0nandnAddr $end
$var wire 1 Z, in1 $end
$var wire 1 `, in1nandAddr $end
$var wire 1 a, nAddr $end
$var wire 1 Y, out $end
$upscope $end
$scope module ourXor $end
$var wire 1 b, AnandB $end
$var wire 1 c, AnorB $end
$var wire 1 d, AorB $end
$var wire 1 O, a $end
$var wire 1 Y, b $end
$var wire 1 e, notXOR $end
$var wire 1 U, out $end
$upscope $end
$scope module oXOR $end
$var wire 1 f, AnandB $end
$var wire 1 g, AnorB $end
$var wire 1 h, AorB $end
$var wire 1 U, a $end
$var wire 1 [, b $end
$var wire 1 i, notXOR $end
$var wire 1 P, out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 j, addr [2:0] $end
$var wire 1 P, in0 $end
$var wire 1 U, in1 $end
$var wire 1 k, in2 $end
$var wire 1 Q, in3 $end
$var wire 1 R, in4 $end
$var wire 1 S, in5 $end
$var wire 1 T, in6 $end
$var wire 1 Q, in7 $end
$var wire 1 l, naddr0 $end
$var wire 1 m, naddr1 $end
$var wire 1 n, naddr2 $end
$var wire 1 ^, out $end
$var wire 1 o, temp0 $end
$var wire 1 p, temp1 $end
$var wire 1 q, temp2 $end
$var wire 1 r, temp3 $end
$var wire 1 s, temp4 $end
$var wire 1 t, temp5 $end
$var wire 1 u, temp6 $end
$var wire 1 v, temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[27] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 w, a $end
$var wire 1 x, aADDb $end
$var wire 1 y, aANDb $end
$var wire 1 z, aNANDb $end
$var wire 1 {, aNORb $end
$var wire 1 |, aORb $end
$var wire 1 }, aXORb $end
$var wire 1 ~, aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 !- aXORb_AND_carryin $end
$var wire 1 "- b $end
$var wire 1 #- bChoice $end
$var wire 1 $- bInv $end
$var wire 1 ( bInvert $end
$var wire 1 %- carryin $end
$var wire 1 &- carryout $end
$var wire 3 '- muxDevice [2:0] $end
$var wire 1 (- out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 "- in0 $end
$var wire 1 )- in0nandnAddr $end
$var wire 1 $- in1 $end
$var wire 1 *- in1nandAddr $end
$var wire 1 +- nAddr $end
$var wire 1 #- out $end
$upscope $end
$scope module ourXor $end
$var wire 1 ,- AnandB $end
$var wire 1 -- AnorB $end
$var wire 1 .- AorB $end
$var wire 1 w, a $end
$var wire 1 #- b $end
$var wire 1 /- notXOR $end
$var wire 1 }, out $end
$upscope $end
$scope module oXOR $end
$var wire 1 0- AnandB $end
$var wire 1 1- AnorB $end
$var wire 1 2- AorB $end
$var wire 1 }, a $end
$var wire 1 %- b $end
$var wire 1 3- notXOR $end
$var wire 1 x, out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 4- addr [2:0] $end
$var wire 1 x, in0 $end
$var wire 1 }, in1 $end
$var wire 1 5- in2 $end
$var wire 1 y, in3 $end
$var wire 1 z, in4 $end
$var wire 1 {, in5 $end
$var wire 1 |, in6 $end
$var wire 1 y, in7 $end
$var wire 1 6- naddr0 $end
$var wire 1 7- naddr1 $end
$var wire 1 8- naddr2 $end
$var wire 1 (- out $end
$var wire 1 9- temp0 $end
$var wire 1 :- temp1 $end
$var wire 1 ;- temp2 $end
$var wire 1 <- temp3 $end
$var wire 1 =- temp4 $end
$var wire 1 >- temp5 $end
$var wire 1 ?- temp6 $end
$var wire 1 @- temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[28] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 A- a $end
$var wire 1 B- aADDb $end
$var wire 1 C- aANDb $end
$var wire 1 D- aNANDb $end
$var wire 1 E- aNORb $end
$var wire 1 F- aORb $end
$var wire 1 G- aXORb $end
$var wire 1 H- aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 I- aXORb_AND_carryin $end
$var wire 1 J- b $end
$var wire 1 K- bChoice $end
$var wire 1 L- bInv $end
$var wire 1 ( bInvert $end
$var wire 1 M- carryin $end
$var wire 1 N- carryout $end
$var wire 3 O- muxDevice [2:0] $end
$var wire 1 P- out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 J- in0 $end
$var wire 1 Q- in0nandnAddr $end
$var wire 1 L- in1 $end
$var wire 1 R- in1nandAddr $end
$var wire 1 S- nAddr $end
$var wire 1 K- out $end
$upscope $end
$scope module ourXor $end
$var wire 1 T- AnandB $end
$var wire 1 U- AnorB $end
$var wire 1 V- AorB $end
$var wire 1 A- a $end
$var wire 1 K- b $end
$var wire 1 W- notXOR $end
$var wire 1 G- out $end
$upscope $end
$scope module oXOR $end
$var wire 1 X- AnandB $end
$var wire 1 Y- AnorB $end
$var wire 1 Z- AorB $end
$var wire 1 G- a $end
$var wire 1 M- b $end
$var wire 1 [- notXOR $end
$var wire 1 B- out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 \- addr [2:0] $end
$var wire 1 B- in0 $end
$var wire 1 G- in1 $end
$var wire 1 ]- in2 $end
$var wire 1 C- in3 $end
$var wire 1 D- in4 $end
$var wire 1 E- in5 $end
$var wire 1 F- in6 $end
$var wire 1 C- in7 $end
$var wire 1 ^- naddr0 $end
$var wire 1 _- naddr1 $end
$var wire 1 `- naddr2 $end
$var wire 1 P- out $end
$var wire 1 a- temp0 $end
$var wire 1 b- temp1 $end
$var wire 1 c- temp2 $end
$var wire 1 d- temp3 $end
$var wire 1 e- temp4 $end
$var wire 1 f- temp5 $end
$var wire 1 g- temp6 $end
$var wire 1 h- temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[29] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 i- a $end
$var wire 1 j- aADDb $end
$var wire 1 k- aANDb $end
$var wire 1 l- aNANDb $end
$var wire 1 m- aNORb $end
$var wire 1 n- aORb $end
$var wire 1 o- aXORb $end
$var wire 1 p- aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 q- aXORb_AND_carryin $end
$var wire 1 r- b $end
$var wire 1 s- bChoice $end
$var wire 1 t- bInv $end
$var wire 1 ( bInvert $end
$var wire 1 u- carryin $end
$var wire 1 v- carryout $end
$var wire 3 w- muxDevice [2:0] $end
$var wire 1 x- out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 r- in0 $end
$var wire 1 y- in0nandnAddr $end
$var wire 1 t- in1 $end
$var wire 1 z- in1nandAddr $end
$var wire 1 {- nAddr $end
$var wire 1 s- out $end
$upscope $end
$scope module ourXor $end
$var wire 1 |- AnandB $end
$var wire 1 }- AnorB $end
$var wire 1 ~- AorB $end
$var wire 1 i- a $end
$var wire 1 s- b $end
$var wire 1 !. notXOR $end
$var wire 1 o- out $end
$upscope $end
$scope module oXOR $end
$var wire 1 ". AnandB $end
$var wire 1 #. AnorB $end
$var wire 1 $. AorB $end
$var wire 1 o- a $end
$var wire 1 u- b $end
$var wire 1 %. notXOR $end
$var wire 1 j- out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 &. addr [2:0] $end
$var wire 1 j- in0 $end
$var wire 1 o- in1 $end
$var wire 1 '. in2 $end
$var wire 1 k- in3 $end
$var wire 1 l- in4 $end
$var wire 1 m- in5 $end
$var wire 1 n- in6 $end
$var wire 1 k- in7 $end
$var wire 1 (. naddr0 $end
$var wire 1 ). naddr1 $end
$var wire 1 *. naddr2 $end
$var wire 1 x- out $end
$var wire 1 +. temp0 $end
$var wire 1 ,. temp1 $end
$var wire 1 -. temp2 $end
$var wire 1 .. temp3 $end
$var wire 1 /. temp4 $end
$var wire 1 0. temp5 $end
$var wire 1 1. temp6 $end
$var wire 1 2. temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[30] $end
$scope begin genblk5 $end
$scope module structureALU $end
$var wire 1 3. a $end
$var wire 1 4. aADDb $end
$var wire 1 5. aANDb $end
$var wire 1 6. aNANDb $end
$var wire 1 7. aNORb $end
$var wire 1 8. aORb $end
$var wire 1 9. aXORb $end
$var wire 1 :. aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 ;. aXORb_AND_carryin $end
$var wire 1 <. b $end
$var wire 1 =. bChoice $end
$var wire 1 >. bInv $end
$var wire 1 ( bInvert $end
$var wire 1 ?. carryin $end
$var wire 1 @. carryout $end
$var wire 3 A. muxDevice [2:0] $end
$var wire 1 B. out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 <. in0 $end
$var wire 1 C. in0nandnAddr $end
$var wire 1 >. in1 $end
$var wire 1 D. in1nandAddr $end
$var wire 1 E. nAddr $end
$var wire 1 =. out $end
$upscope $end
$scope module ourXor $end
$var wire 1 F. AnandB $end
$var wire 1 G. AnorB $end
$var wire 1 H. AorB $end
$var wire 1 3. a $end
$var wire 1 =. b $end
$var wire 1 I. notXOR $end
$var wire 1 9. out $end
$upscope $end
$scope module oXOR $end
$var wire 1 J. AnandB $end
$var wire 1 K. AnorB $end
$var wire 1 L. AorB $end
$var wire 1 9. a $end
$var wire 1 ?. b $end
$var wire 1 M. notXOR $end
$var wire 1 4. out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 N. addr [2:0] $end
$var wire 1 4. in0 $end
$var wire 1 9. in1 $end
$var wire 1 O. in2 $end
$var wire 1 5. in3 $end
$var wire 1 6. in4 $end
$var wire 1 7. in5 $end
$var wire 1 8. in6 $end
$var wire 1 5. in7 $end
$var wire 1 P. naddr0 $end
$var wire 1 Q. naddr1 $end
$var wire 1 R. naddr2 $end
$var wire 1 B. out $end
$var wire 1 S. temp0 $end
$var wire 1 T. temp1 $end
$var wire 1 U. temp2 $end
$var wire 1 V. temp3 $end
$var wire 1 W. temp4 $end
$var wire 1 X. temp5 $end
$var wire 1 Y. temp6 $end
$var wire 1 Z. temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ALUbit[31] $end
$scope begin genblk4 $end
$scope module sALU $end
$var wire 1 [. a $end
$var wire 1 \. aADDb $end
$var wire 1 ]. aANDb $end
$var wire 1 ^. aNANDb $end
$var wire 1 _. aNORb $end
$var wire 1 `. aORb $end
$var wire 1 a. aXORb $end
$var wire 1 b. aXORb_AND_Carryin__nor__aAndb $end
$var wire 1 c. aXORb_AND_carryin $end
$var wire 1 d. b $end
$var wire 1 e. bChoice $end
$var wire 1 f. bInv $end
$var wire 1 ( bInvert $end
$var wire 1 g. carryin $end
$var wire 1 h. carryout $end
$var wire 3 i. muxDevice [2:0] $end
$var wire 1 j. out $end
$scope module twooneMux $end
$var wire 1 ( address $end
$var wire 1 d. in0 $end
$var wire 1 k. in0nandnAddr $end
$var wire 1 f. in1 $end
$var wire 1 l. in1nandAddr $end
$var wire 1 m. nAddr $end
$var wire 1 e. out $end
$upscope $end
$scope module ourXor $end
$var wire 1 n. AnandB $end
$var wire 1 o. AnorB $end
$var wire 1 p. AorB $end
$var wire 1 [. a $end
$var wire 1 e. b $end
$var wire 1 q. notXOR $end
$var wire 1 a. out $end
$upscope $end
$scope module oXOR $end
$var wire 1 r. AnandB $end
$var wire 1 s. AnorB $end
$var wire 1 t. AorB $end
$var wire 1 a. a $end
$var wire 1 g. b $end
$var wire 1 u. notXOR $end
$var wire 1 \. out $end
$upscope $end
$scope module eightonemux $end
$var wire 3 v. addr [2:0] $end
$var wire 1 \. in0 $end
$var wire 1 a. in1 $end
$var wire 1 w. in2 $end
$var wire 1 ]. in3 $end
$var wire 1 ^. in4 $end
$var wire 1 _. in5 $end
$var wire 1 `. in6 $end
$var wire 1 ]. in7 $end
$var wire 1 x. naddr0 $end
$var wire 1 y. naddr1 $end
$var wire 1 z. naddr2 $end
$var wire 1 j. out $end
$var wire 1 {. temp0 $end
$var wire 1 |. temp1 $end
$var wire 1 }. temp2 $end
$var wire 1 ~. temp3 $end
$var wire 1 !/ temp4 $end
$var wire 1 "/ temp5 $end
$var wire 1 #/ temp6 $end
$var wire 1 $/ temp7 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin ANDGenerator[1] $end
$upscope $end
$scope begin ANDGenerator[2] $end
$upscope $end
$scope begin ANDGenerator[3] $end
$upscope $end
$scope begin ANDGenerator[4] $end
$upscope $end
$scope begin ANDGenerator[5] $end
$upscope $end
$scope begin ANDGenerator[6] $end
$upscope $end
$scope begin ANDGenerator[7] $end
$upscope $end
$scope begin ANDGenerator[8] $end
$upscope $end
$scope begin ANDGenerator[9] $end
$upscope $end
$scope begin ANDGenerator[10] $end
$upscope $end
$scope begin ANDGenerator[11] $end
$upscope $end
$scope begin ANDGenerator[12] $end
$upscope $end
$scope begin ANDGenerator[13] $end
$upscope $end
$scope begin ANDGenerator[14] $end
$upscope $end
$scope begin ANDGenerator[15] $end
$upscope $end
$scope begin ANDGenerator[16] $end
$upscope $end
$scope begin ANDGenerator[17] $end
$upscope $end
$scope begin ANDGenerator[18] $end
$upscope $end
$scope begin ANDGenerator[19] $end
$upscope $end
$scope begin ANDGenerator[20] $end
$upscope $end
$scope begin ANDGenerator[21] $end
$upscope $end
$scope begin ANDGenerator[22] $end
$upscope $end
$scope begin ANDGenerator[23] $end
$upscope $end
$scope begin ANDGenerator[24] $end
$upscope $end
$scope begin ANDGenerator[25] $end
$upscope $end
$scope begin ANDGenerator[26] $end
$upscope $end
$scope begin ANDGenerator[27] $end
$upscope $end
$scope begin ANDGenerator[28] $end
$upscope $end
$scope begin ANDGenerator[29] $end
$upscope $end
$scope begin ANDGenerator[30] $end
$upscope $end
$scope begin ANDGenerator[31] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
z$/
z#/
z"/
z!/
z~.
z}.
z|.
z{.
xz.
xy.
xx.
0w.
b0 v.
xu.
xt.
xs.
xr.
xq.
xp.
xo.
zn.
xm.
xl.
zk.
xj.
b0 i.
xh.
xg.
zf.
xe.
0d.
xc.
xb.
xa.
z`.
z_.
z^.
z].
x\.
0[.
zZ.
zY.
zX.
zW.
zV.
zU.
zT.
zS.
xR.
xQ.
xP.
0O.
b0 N.
xM.
xL.
xK.
xJ.
xI.
xH.
xG.
zF.
xE.
xD.
zC.
xB.
b0 A.
x@.
x?.
z>.
x=.
0<.
x;.
x:.
x9.
z8.
z7.
z6.
z5.
x4.
03.
z2.
z1.
z0.
z/.
z..
z-.
z,.
z+.
x*.
x).
x(.
0'.
b0 &.
x%.
x$.
x#.
x".
x!.
x~-
x}-
z|-
x{-
xz-
zy-
xx-
b0 w-
xv-
xu-
zt-
xs-
0r-
xq-
xp-
xo-
zn-
zm-
zl-
zk-
xj-
0i-
zh-
zg-
zf-
ze-
zd-
zc-
zb-
za-
x`-
x_-
x^-
0]-
b0 \-
x[-
xZ-
xY-
xX-
xW-
xV-
xU-
zT-
xS-
xR-
zQ-
xP-
b0 O-
xN-
xM-
zL-
xK-
0J-
xI-
xH-
xG-
zF-
zE-
zD-
zC-
xB-
0A-
z@-
z?-
z>-
z=-
z<-
z;-
z:-
z9-
x8-
x7-
x6-
05-
b0 4-
x3-
x2-
x1-
x0-
x/-
x.-
x--
z,-
x+-
x*-
z)-
x(-
b0 '-
x&-
x%-
z$-
x#-
0"-
x!-
x~,
x},
z|,
z{,
zz,
zy,
xx,
0w,
zv,
zu,
zt,
zs,
zr,
zq,
zp,
zo,
xn,
xm,
xl,
0k,
b0 j,
xi,
xh,
xg,
xf,
xe,
xd,
xc,
zb,
xa,
x`,
z_,
x^,
b0 ],
x\,
x[,
zZ,
xY,
0X,
xW,
xV,
xU,
zT,
zS,
zR,
zQ,
xP,
0O,
zN,
zM,
zL,
zK,
zJ,
zI,
zH,
zG,
xF,
xE,
xD,
0C,
b0 B,
xA,
x@,
x?,
x>,
x=,
x<,
x;,
z:,
x9,
x8,
z7,
x6,
b0 5,
x4,
x3,
z2,
x1,
00,
x/,
x.,
x-,
z,,
z+,
z*,
z),
x(,
0',
z&,
z%,
z$,
z#,
z",
z!,
z~+
z}+
x|+
x{+
xz+
0y+
b0 x+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
zp+
xo+
xn+
zm+
xl+
b0 k+
xj+
xi+
zh+
xg+
0f+
xe+
xd+
xc+
zb+
za+
z`+
z_+
x^+
0]+
z\+
z[+
zZ+
zY+
zX+
zW+
zV+
zU+
xT+
xS+
xR+
0Q+
b0 P+
xO+
xN+
xM+
xL+
xK+
xJ+
xI+
zH+
xG+
xF+
zE+
xD+
b0 C+
xB+
xA+
z@+
x?+
0>+
x=+
x<+
x;+
z:+
z9+
z8+
z7+
x6+
05+
z4+
z3+
z2+
z1+
z0+
z/+
z.+
z-+
x,+
x++
x*+
0)+
b0 (+
x'+
x&+
x%+
x$+
x#+
x"+
x!+
z~*
x}*
x|*
z{*
xz*
b0 y*
xx*
xw*
zv*
xu*
0t*
xs*
xr*
xq*
zp*
zo*
zn*
zm*
xl*
0k*
zj*
zi*
zh*
zg*
zf*
ze*
zd*
zc*
xb*
xa*
x`*
0_*
b0 ^*
x]*
x\*
x[*
xZ*
xY*
xX*
xW*
zV*
xU*
xT*
zS*
xR*
b0 Q*
xP*
xO*
zN*
xM*
0L*
xK*
xJ*
xI*
zH*
zG*
zF*
zE*
xD*
0C*
zB*
zA*
z@*
z?*
z>*
z=*
z<*
z;*
x:*
x9*
x8*
07*
b0 6*
x5*
x4*
x3*
x2*
x1*
x0*
x/*
z.*
x-*
x,*
z+*
x**
b0 )*
x(*
x'*
z&*
x%*
0$*
x#*
x"*
x!*
z~)
z})
z|)
z{)
xz)
0y)
zx)
zw)
zv)
zu)
zt)
zs)
zr)
zq)
xp)
xo)
xn)
0m)
b0 l)
xk)
xj)
xi)
xh)
xg)
xf)
xe)
zd)
xc)
xb)
za)
x`)
b0 _)
x^)
x])
z\)
x[)
0Z)
xY)
xX)
xW)
zV)
zU)
zT)
zS)
xR)
0Q)
zP)
zO)
zN)
zM)
zL)
zK)
zJ)
zI)
xH)
xG)
xF)
0E)
b0 D)
xC)
xB)
xA)
x@)
x?)
x>)
x=)
z<)
x;)
x:)
z9)
x8)
b0 7)
x6)
x5)
z4)
x3)
02)
x1)
x0)
x/)
z.)
z-)
z,)
z+)
x*)
0))
z()
z')
z&)
z%)
z$)
z#)
z")
z!)
x~(
x}(
x|(
0{(
b0 z(
xy(
xx(
xw(
xv(
xu(
xt(
xs(
zr(
xq(
xp(
zo(
xn(
b0 m(
xl(
xk(
zj(
xi(
0h(
xg(
xf(
xe(
zd(
zc(
zb(
za(
x`(
0_(
z^(
z](
z\(
z[(
zZ(
zY(
zX(
zW(
xV(
xU(
xT(
0S(
b0 R(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
zJ(
xI(
xH(
zG(
xF(
b0 E(
xD(
xC(
zB(
xA(
0@(
x?(
x>(
x=(
z<(
z;(
z:(
z9(
x8(
07(
z6(
z5(
z4(
z3(
z2(
z1(
z0(
z/(
x.(
x-(
x,(
0+(
b0 *(
x)(
x((
x'(
x&(
x%(
x$(
x#(
z"(
x!(
x~'
z}'
x|'
b0 {'
xz'
xy'
zx'
xw'
0v'
xu'
xt'
xs'
zr'
zq'
zp'
zo'
xn'
0m'
zl'
zk'
zj'
zi'
zh'
zg'
zf'
ze'
xd'
xc'
xb'
0a'
b0 `'
x_'
x^'
x]'
x\'
x['
xZ'
xY'
zX'
xW'
xV'
zU'
xT'
b0 S'
xR'
xQ'
zP'
xO'
0N'
xM'
xL'
xK'
zJ'
zI'
zH'
zG'
xF'
0E'
zD'
zC'
zB'
zA'
z@'
z?'
z>'
z='
x<'
x;'
x:'
09'
b0 8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
z0'
x/'
x.'
z-'
x,'
b0 +'
x*'
x)'
z('
x''
0&'
x%'
x$'
x#'
z"'
z!'
z~&
z}&
x|&
0{&
zz&
zy&
zx&
zw&
zv&
zu&
zt&
zs&
xr&
xq&
xp&
0o&
b0 n&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
zf&
xe&
xd&
zc&
xb&
b0 a&
x`&
x_&
z^&
x]&
0\&
x[&
xZ&
xY&
zX&
zW&
zV&
zU&
xT&
0S&
zR&
zQ&
zP&
zO&
zN&
zM&
zL&
zK&
xJ&
xI&
xH&
0G&
b0 F&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
z>&
x=&
x<&
z;&
x:&
b0 9&
x8&
x7&
z6&
x5&
04&
x3&
x2&
x1&
z0&
z/&
z.&
z-&
x,&
0+&
z*&
z)&
z(&
z'&
z&&
z%&
z$&
z#&
x"&
x!&
x~%
0}%
b0 |%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
zt%
xs%
xr%
zq%
xp%
b0 o%
xn%
xm%
zl%
xk%
0j%
xi%
xh%
xg%
zf%
ze%
zd%
zc%
xb%
0a%
z`%
z_%
z^%
z]%
z\%
z[%
zZ%
zY%
xX%
xW%
xV%
0U%
b0 T%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
zL%
xK%
xJ%
zI%
xH%
b0 G%
xF%
xE%
zD%
xC%
0B%
xA%
x@%
x?%
z>%
z=%
z<%
z;%
x:%
09%
z8%
z7%
z6%
z5%
z4%
z3%
z2%
z1%
x0%
x/%
x.%
0-%
b0 ,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
z$%
x#%
x"%
z!%
x~$
b0 }$
x|$
x{$
zz$
xy$
0x$
xw$
xv$
xu$
zt$
zs$
zr$
zq$
xp$
0o$
zn$
zm$
zl$
zk$
zj$
zi$
zh$
zg$
xf$
xe$
xd$
0c$
b0 b$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
zZ$
xY$
xX$
zW$
xV$
b0 U$
xT$
xS$
zR$
xQ$
0P$
xO$
xN$
xM$
zL$
zK$
zJ$
zI$
xH$
0G$
zF$
zE$
zD$
zC$
zB$
zA$
z@$
z?$
x>$
x=$
x<$
0;$
b0 :$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
z2$
x1$
x0$
z/$
x.$
b0 -$
x,$
x+$
z*$
x)$
0($
x'$
x&$
x%$
z$$
z#$
z"$
z!$
x~#
0}#
z|#
z{#
zz#
zy#
zx#
zw#
zv#
zu#
xt#
xs#
xr#
0q#
b0 p#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
zh#
xg#
xf#
ze#
xd#
b0 c#
xb#
xa#
z`#
x_#
0^#
x]#
x\#
x[#
zZ#
zY#
zX#
zW#
xV#
0U#
zT#
zS#
zR#
zQ#
zP#
zO#
zN#
zM#
xL#
xK#
xJ#
0I#
b0 H#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
z@#
x?#
x>#
z=#
x<#
b0 ;#
x:#
x9#
z8#
x7#
06#
x5#
x4#
x3#
z2#
z1#
z0#
z/#
x.#
0-#
z,#
z+#
z*#
z)#
z(#
z'#
z&#
z%#
x$#
x##
x"#
0!#
b0 ~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
zv"
xu"
xt"
zs"
xr"
b0 q"
xp"
xo"
zn"
xm"
0l"
xk"
xj"
xi"
zh"
zg"
zf"
ze"
xd"
0c"
zb"
za"
z`"
z_"
z^"
z]"
z\"
z["
xZ"
xY"
xX"
0W"
b0 V"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
zN"
xM"
xL"
zK"
xJ"
b0 I"
xH"
xG"
zF"
xE"
0D"
xC"
xB"
xA"
z@"
z?"
z>"
z="
x<"
0;"
z:"
z9"
z8"
z7"
z6"
z5"
z4"
z3"
x2"
x1"
x0"
0/"
b0 ."
x-"
x,"
x+"
x*"
x)"
x("
x'"
z&"
x%"
x$"
z#"
x""
b0 !"
x~
x}
z|
x{
0z
xy
xx
xw
zv
zu
zt
zs
xr
0q
zp
zo
zn
zm
zl
zk
zj
zi
xh
xg
xf
0e
b0 d
xc
xb
xa
x`
x_
x^
x]
z\
x[
xZ
zY
xX
b0 W
xV
xU
zT
xS
0R
xQ
xP
xO
zN
zM
zL
zK
xJ
0I
bx H
xG
bzx F
bx E
bx D
bx C
xB
xA
x@
x?
x>
0=
b0 <
1;
b1 :
bx 9
x8
x7
x6
bzx 5
x4
z3
02
bx 1
b0 0
b0 /
x.
z-
z,
b0 +
b1 *
bx )
1(
b1 '
b0 &
b0 %
x$
x#
bx "
x!
$end
#10
xi
x3"
x["
x%#
xM#
xu#
x?$
xg$
x1%
xY%
x#&
xK&
xs&
x='
xe'
x/(
xW(
x!)
xI)
xq)
x;*
xc*
x-+
xU+
x}+
xG,
xo,
x9-
xa-
x+.
xS.
x{.
1f
1g
1h
10"
11"
12"
1X"
1Y"
1Z"
1"#
1##
1$#
1J#
1K#
1L#
1r#
1s#
1t#
1<$
1=$
1>$
1d$
1e$
1f$
1.%
1/%
10%
1V%
1W%
1X%
1~%
1!&
1"&
1H&
1I&
1J&
1p&
1q&
1r&
1:'
1;'
1<'
1b'
1c'
1d'
1,(
1-(
1.(
1T(
1U(
1V(
1|(
1}(
1~(
1F)
1G)
1H)
1n)
1o)
1p)
18*
19*
1:*
1`*
1a*
1b*
1*+
1++
1,+
1R+
1S+
1T+
1z+
1{+
1|+
1D,
1E,
1F,
1l,
1m,
1n,
16-
17-
18-
1^-
1_-
1`-
1(.
1).
1*.
1P.
1Q.
1R.
1x.
1y.
1z.
1G
0[
0%"
0M"
0u"
0?#
0g#
01$
0Y$
0#%
0K%
0s%
0=&
0e&
0/'
0W'
0!(
0I(
0q(
0;)
0c)
0-*
0U*
0}*
0G+
0o+
09,
0a,
0+-
0S-
0{-
0E.
0m.
1T
1|
1F"
1n"
18#
1`#
1*$
1R$
1z$
1D%
1l%
16&
1^&
1('
1P'
1x'
1B(
1j(
14)
1\)
1&*
1N*
1v*
1@+
1h+
12,
1Z,
1$-
1L-
1t-
1>.
1f.
1-
1,
#20
1n.
1k.
1^.
1_.
1F.
1C.
16.
17.
1|-
1y-
1l-
1m-
1T-
1Q-
1D-
1E-
1,-
1)-
1z,
1{,
1b,
1_,
1R,
1S,
1:,
17,
1*,
1+,
1p+
1m+
1`+
1a+
1H+
1E+
18+
19+
1~*
1{*
1n*
1o*
1V*
1S*
1F*
1G*
1.*
1+*
1|)
1})
1d)
1a)
1T)
1U)
1<)
19)
1,)
1-)
1r(
1o(
1b(
1c(
1J(
1G(
1:(
1;(
1"(
1}'
1p'
1q'
1X'
1U'
1H'
1I'
10'
1-'
1~&
1!'
1f&
1c&
1V&
1W&
1>&
1;&
1.&
1/&
1t%
1q%
1d%
1e%
1L%
1I%
1<%
1=%
1$%
1!%
1r$
1s$
1Z$
1W$
1J$
1K$
12$
1/$
1"$
1#$
1h#
1e#
1X#
1Y#
1@#
1=#
10#
11#
1v"
1s"
1f"
1g"
1N"
1K"
1>"
1?"
1&"
1#"
1t
1u
1\
1Y
1L
1M
#30
1U
0].
0`.
05.
08.
0k-
0n-
0C-
0F-
0y,
0|,
0Q,
0T,
0),
0,,
0_+
0b+
07+
0:+
0m*
0p*
0E*
0H*
0{)
0~)
0S)
0V)
0+)
0.)
0a(
0d(
09(
0<(
0o'
0r'
0G'
0J'
0}&
0"'
0U&
0X&
0-&
00&
0c%
0f%
0;%
0>%
0q$
0t$
0I$
0L$
0!$
0$$
0W#
0Z#
0/#
02#
0e"
0h"
0="
0@"
0s
0v
0K
0N
0Z
0$"
0L"
0t"
0>#
0f#
00$
0X$
0"%
0J%
0r%
0<&
0d&
0.'
0V'
0~'
0H(
0p(
0:)
0b)
0,*
0T*
0|*
0F+
0n+
08,
0`,
0*-
0R-
0z-
0D.
0l.
b0 D
bx1 )
b0x 5
b0x F
03
#50
0a
1S
1{
1E"
1m"
17#
1_#
1)$
1Q$
1y$
1C%
1k%
15&
1]&
1''
1O'
1w'
1A(
1i(
13)
1[)
1%*
1M*
1u*
1?+
1g+
11,
1Y,
1#-
1K-
1s-
1=.
1e.
0j
0l
0m
0n
0o
0p
04"
06"
07"
08"
09"
0:"
0\"
0^"
0_"
0`"
0a"
0b"
0&#
0(#
0)#
0*#
0+#
0,#
0N#
0P#
0Q#
0R#
0S#
0T#
0v#
0x#
0y#
0z#
0{#
0|#
0@$
0B$
0C$
0D$
0E$
0F$
0h$
0j$
0k$
0l$
0m$
0n$
02%
04%
05%
06%
07%
08%
0Z%
0\%
0]%
0^%
0_%
0`%
0$&
0&&
0'&
0(&
0)&
0*&
0L&
0N&
0O&
0P&
0Q&
0R&
0t&
0v&
0w&
0x&
0y&
0z&
0>'
0@'
0A'
0B'
0C'
0D'
0f'
0h'
0i'
0j'
0k'
0l'
00(
02(
03(
04(
05(
06(
0X(
0Z(
0[(
0\(
0](
0^(
0")
0$)
0%)
0&)
0')
0()
0J)
0L)
0M)
0N)
0O)
0P)
0r)
0t)
0u)
0v)
0w)
0x)
0<*
0>*
0?*
0@*
0A*
0B*
0d*
0f*
0g*
0h*
0i*
0j*
0.+
00+
01+
02+
03+
04+
0V+
0X+
0Y+
0Z+
0[+
0\+
0~+
0",
0#,
0$,
0%,
0&,
0H,
0J,
0K,
0L,
0M,
0N,
0p,
0r,
0s,
0t,
0u,
0v,
0:-
0<-
0=-
0>-
0?-
0@-
0b-
0d-
0e-
0f-
0g-
0h-
0,.
0..
0/.
00.
01.
02.
0T.
0V.
0W.
0X.
0Y.
0Z.
0|.
0~.
0!/
0"/
0#/
0$/
0}.
0U.
0-.
0c-
0;-
0q,
0I,
0!,
0W+
0/+
0e*
0=*
0s)
0K)
0#)
0Y(
01(
0g'
0?'
0u&
0M&
0%&
0[%
03%
0i$
0A$
0w#
0O#
0'#
0]"
05"
0k
#60
1b
#70
0]
0'"
0O"
0w"
0A#
0i#
03$
0[$
0%%
0M%
0u%
0?&
0g&
01'
0Y'
0#(
0K(
0s(
0=)
0e)
0/*
0W*
0!+
0I+
0q+
0;,
0c,
0--
0U-
0}-
0G.
0o.
#80
1^
1("
1P"
1x"
1B#
1j#
14$
1\$
1&%
1N%
1v%
1@&
1h&
12'
1Z'
1$(
1L(
1t(
1>)
1f)
10*
1X*
1"+
1J+
1r+
1<,
1d,
1.-
1V-
1~-
1H.
1p.
#100
0_
0)"
0Q"
0y"
0C#
0k#
05$
0]$
0'%
0O%
0w%
0A&
0i&
03'
0['
0%(
0M(
0u(
0?)
0g)
01*
0Y*
0#+
0K+
0s+
0=,
0e,
0/-
0W-
0!.
0I.
0q.
#110
1O
1w
1A"
1i"
13#
1[#
1%$
1M$
1u$
1?%
1g%
11&
1Y&
1#'
1K'
1s'
1=(
1e(
1/)
1W)
1!*
1I*
1q*
1;+
1c+
1-,
1U,
1},
1G-
1o-
19.
1a.
#130
0`
0+"
0S"
0{"
0E#
0m#
07$
0_$
0)%
0Q%
0y%
0C&
0k&
05'
0]'
0'(
0O(
0w(
0A)
0i)
03*
0[*
0%+
0M+
0u+
0?,
0g,
01-
0Y-
0#.
0K.
0s.
#140
1,"
1T"
1|"
1F#
1n#
18$
1`$
1*%
1R%
1z%
1D&
1l&
16'
1^'
1((
1P(
1x(
1B)
1j)
14*
1\*
1&+
1N+
1v+
1@,
1h,
12-
1Z-
1$.
1L.
1t.
1Q
#150
1c
#160
0J
0P
#170
1}
1V
bx11 )
#190
0*"
#200
1y
#210
1-"
0i
#220
0r
0x
#230
1G"
1~
bx111 )
#250
0R"
#260
1C"
#270
1U"
03"
#280
0<"
0B"
#290
1o"
1H"
bx1111 )
#300
0X
bx0 9
bx0 E
#310
0z"
#320
1k"
#330
1}"
bx0 C
0["
#340
0d"
0j"
#350
19#
1p"
bx11111 )
#360
bx0 "
bx0 1
bx0 H
0""
bx00 9
bx00 E
#370
0D#
#380
15#
#390
1G#
bx00 C
0%#
#400
0.#
04#
#410
1a#
1:#
bx111111 )
#420
bx00 "
bx00 1
bx00 H
0J"
bx000 9
bx000 E
#430
0l#
#440
1]#
#450
1o#
bx000 C
0M#
#460
0V#
0\#
#470
1+$
1b#
bx1111111 )
#480
bx000 "
bx000 1
bx000 H
0r"
bx0000 9
bx0000 E
#490
06$
#500
1'$
#510
19$
bx0000 C
0u#
#520
0~#
0&$
#530
1S$
1,$
bx11111111 )
#540
bx0000 "
bx0000 1
bx0000 H
0<#
bx00000 9
bx00000 E
#550
0^$
#560
1O$
#570
1a$
bx00000 C
0?$
#580
0H$
0N$
#590
1{$
1T$
bx111111111 )
#600
bx00000 "
bx00000 1
bx00000 H
0d#
bx000000 9
bx000000 E
#610
0(%
#620
1w$
#630
1+%
bx000000 C
0g$
#640
0p$
0v$
#650
1E%
1|$
bx1111111111 )
#660
bx000000 "
bx000000 1
bx000000 H
0.$
bx0000000 9
bx0000000 E
#670
0P%
#680
1A%
#690
1S%
bx0000000 C
01%
#700
0:%
0@%
#710
1m%
1F%
bx11111111111 )
#720
bx0000000 "
bx0000000 1
bx0000000 H
0V$
bx00000000 9
bx00000000 E
#730
0x%
#740
1i%
#750
1{%
bx00000000 C
0Y%
#760
0b%
0h%
#770
17&
1n%
bx111111111111 )
#780
bx00000000 "
bx00000000 1
bx00000000 H
0~$
bx000000000 9
bx000000000 E
#790
0B&
#800
13&
#810
1E&
bx000000000 C
0#&
#820
0,&
02&
#830
1_&
18&
bx1111111111111 )
#840
bx000000000 "
bx000000000 1
bx000000000 H
0H%
bx0000000000 9
bx0000000000 E
#850
0j&
#860
1[&
#870
1m&
bx0000000000 C
0K&
#880
0T&
0Z&
#890
1)'
1`&
bx11111111111111 )
#900
bx0000000000 "
bx0000000000 1
bx0000000000 H
0p%
bx00000000000 9
bx00000000000 E
#910
04'
#920
1%'
#930
17'
bx00000000000 C
0s&
#940
0|&
0$'
#950
1Q'
1*'
bx111111111111111 )
#960
bx00000000000 "
bx00000000000 1
bx00000000000 H
0:&
bx000000000000 9
bx000000000000 E
#970
0\'
#980
1M'
#990
1_'
bx000000000000 C
0='
#1000
0F'
0L'
#1010
1y'
1R'
bx1111111111111111 )
#1020
bx000000000000 "
bx000000000000 1
bx000000000000 H
0b&
bx0000000000000 9
bx0000000000000 E
#1030
0&(
#1040
1u'
#1050
1)(
bx0000000000000 C
0e'
#1060
0n'
0t'
#1070
1C(
1z'
bx11111111111111111 )
#1080
bx0000000000000 "
bx0000000000000 1
bx0000000000000 H
0,'
bx00000000000000 9
bx00000000000000 E
#1090
0N(
#1100
1?(
#1110
1Q(
bx00000000000000 C
0/(
#1120
08(
0>(
#1130
1k(
1D(
bx111111111111111111 )
#1140
bx00000000000000 "
bx00000000000000 1
bx00000000000000 H
0T'
bx000000000000000 9
bx000000000000000 E
#1150
0v(
#1160
1g(
#1170
1y(
bx000000000000000 C
0W(
#1180
0`(
0f(
#1190
15)
1l(
bx1111111111111111111 )
#1200
bx000000000000000 "
bx000000000000000 1
bx000000000000000 H
0|'
bx0000000000000000 9
bx0000000000000000 E
#1210
0@)
#1220
11)
#1230
1C)
bx0000000000000000 C
0!)
#1240
0*)
00)
#1250
1])
16)
bx11111111111111111111 )
#1260
bx0000000000000000 "
bx0000000000000000 1
bx0000000000000000 H
0F(
bx00000000000000000 9
bx00000000000000000 E
#1270
0h)
#1280
1Y)
#1290
1k)
bx00000000000000000 C
0I)
#1300
0R)
0X)
#1310
1'*
1^)
bx111111111111111111111 )
#1320
bx00000000000000000 "
bx00000000000000000 1
bx00000000000000000 H
0n(
bx000000000000000000 9
bx000000000000000000 E
#1330
02*
#1340
1#*
#1350
15*
bx000000000000000000 C
0q)
#1360
0z)
0"*
#1370
1O*
1(*
bx1111111111111111111111 )
#1380
bx000000000000000000 "
bx000000000000000000 1
bx000000000000000000 H
08)
bx0000000000000000000 9
bx0000000000000000000 E
#1390
0Z*
#1400
1K*
#1410
1]*
bx0000000000000000000 C
0;*
#1420
0D*
0J*
#1430
1w*
1P*
bx11111111111111111111111 )
#1440
bx0000000000000000000 "
bx0000000000000000000 1
bx0000000000000000000 H
0`)
bx00000000000000000000 9
bx00000000000000000000 E
#1450
0$+
#1460
1s*
#1470
1'+
bx00000000000000000000 C
0c*
#1480
0l*
0r*
#1490
1A+
1x*
bx111111111111111111111111 )
#1500
bx00000000000000000000 "
bx00000000000000000000 1
bx00000000000000000000 H
0**
bx000000000000000000000 9
bx000000000000000000000 E
#1510
0L+
#1520
1=+
#1530
1O+
bx000000000000000000000 C
0-+
#1540
06+
0<+
#1550
1i+
1B+
bx1111111111111111111111111 )
#1560
bx000000000000000000000 "
bx000000000000000000000 1
bx000000000000000000000 H
0R*
bx0000000000000000000000 9
bx0000000000000000000000 E
#1570
0t+
#1580
1e+
#1590
1w+
bx0000000000000000000000 C
0U+
#1600
0^+
0d+
#1610
13,
1j+
bx11111111111111111111111111 )
#1620
bx0000000000000000000000 "
bx0000000000000000000000 1
bx0000000000000000000000 H
0z*
bx00000000000000000000000 9
bx00000000000000000000000 E
#1630
0>,
#1640
1/,
#1650
1A,
bx00000000000000000000000 C
0}+
#1660
0(,
0.,
#1670
1[,
14,
bx111111111111111111111111111 )
#1680
bx00000000000000000000000 "
bx00000000000000000000000 1
bx00000000000000000000000 H
0D+
bx000000000000000000000000 9
bx000000000000000000000000 E
#1690
0f,
#1700
1W,
#1710
1i,
bx000000000000000000000000 C
0G,
#1720
0P,
0V,
#1730
1%-
1\,
bx1111111111111111111111111111 )
#1740
bx000000000000000000000000 "
bx000000000000000000000000 1
bx000000000000000000000000 H
0l+
bx0000000000000000000000000 9
bx0000000000000000000000000 E
#1750
00-
#1760
1!-
#1770
13-
bx0000000000000000000000000 C
0o,
#1780
0x,
0~,
#1790
1M-
1&-
bx11111111111111111111111111111 )
#1800
bx0000000000000000000000000 "
bx0000000000000000000000000 1
bx0000000000000000000000000 H
06,
bx00000000000000000000000000 9
bx00000000000000000000000000 E
#1810
0X-
#1820
1I-
#1830
1[-
bx00000000000000000000000000 C
09-
#1840
0B-
0H-
#1850
1u-
1N-
bx111111111111111111111111111111 )
#1860
bx00000000000000000000000000 "
bx00000000000000000000000000 1
bx00000000000000000000000000 H
0^,
bx000000000000000000000000000 9
bx000000000000000000000000000 E
#1870
0".
#1880
1q-
#1890
1%.
bx000000000000000000000000000 C
0a-
#1900
0j-
0p-
#1910
1?.
1v-
bx1111111111111111111111111111111 )
#1920
bx000000000000000000000000000 "
bx000000000000000000000000000 1
bx000000000000000000000000000 H
0(-
bx0000000000000000000000000000 9
bx0000000000000000000000000000 E
#1930
0J.
#1940
1;.
#1950
1M.
bx0000000000000000000000000000 C
0+.
#1960
04.
0:.
#1970
1g.
1A
1@.
bx11111111111111111111111111111111 )
#1980
bx0000000000000000000000000000 "
bx0000000000000000000000000000 1
bx0000000000000000000000000000 H
0P-
bx00000000000000000000000000000 9
bx00000000000000000000000000000 E
#1990
0r.
0?
#2000
1@
1c.
#2010
1u.
bx00000000000000000000000000000 C
0S.
#2020
0\.
0b.
#2030
1h.
b111111111111111111111111111111111 )
#2040
bx00000000000000000000000000000 "
bx00000000000000000000000000000 1
bx00000000000000000000000000000 H
0x-
bx000000000000000000000000000000 9
bx000000000000000000000000000000 E
#2070
bx000000000000000000000000000000 C
1!
0{.
#2090
0>
#2100
bx000000000000000000000000000000 "
bx000000000000000000000000000000 1
bx000000000000000000000000000000 H
0B.
bx0000000000000000000000000000000 9
bx0000000000000000000000000000000 E
#2110
1B
#2120
07
#2130
1.
bx0000000000000000000000000000000 C
#2150
04
#2160
bx0000000000000000000000000000000 "
bx0000000000000000000000000000000 1
bx0000000000000000000000000000000 H
0#
0j.
b0 9
b0 E
#2190
06
b0 C
#2220
b0 "
b0 1
b0 H
b0 5
b0 F
#2550
08
#2560
1$
#10000
1R
1z
1D"
1l"
16#
1^#
1($
1P$
1x$
1B%
1j%
14&
1\&
1&'
1N'
1v'
1@(
1h(
12)
1Z)
1$*
1L*
1t*
1>+
1f+
10,
1X,
1"-
1J-
1r-
1<.
1d.
1I
0;
0(
b11111111111111111111111111111111 &
b11111111111111111111111111111111 0
b1 %
b1 /
b0 '
b0 *
b0 :
#10010
0T
0|
0F"
0n"
08#
0`#
0*$
0R$
0z$
0D%
0l%
06&
0^&
0('
0P'
0x'
0B(
0j(
04)
0\)
0&*
0N*
0v*
0@+
0h+
02,
0Z,
0$-
0L-
0t-
0>.
0f.
1[
1%"
1M"
1u"
1?#
1g#
11$
1Y$
1#%
1K%
1s%
1=&
1e&
1/'
1W'
1!(
1I(
1q(
1;)
1c)
1-*
1U*
1}*
1G+
1o+
19,
1a,
1+-
1S-
1{-
1E.
1m.
#10020
0u
0?"
0g"
01#
0Y#
0#$
0K$
0s$
0=%
0e%
0/&
0W&
0!'
0I'
0q'
0;(
0c(
0-)
0U)
0})
0G*
0o*
09+
0a+
0+,
0S,
0{,
0E-
0m-
07.
0_.
0M
0L
0\
1Z
1$"
1L"
1t"
1>#
1f#
10$
1X$
1"%
1J%
1r%
1<&
1d&
1.'
1V'
1~'
1H(
1p(
1:)
1b)
1,*
1T*
1|*
1F+
1n+
18,
1`,
1*-
1R-
1z-
1D.
1l.
#10030
0U
1v
1@"
1h"
12#
1Z#
1$$
1L$
1t$
1>%
1f%
10&
1X&
1"'
1J'
1r'
1<(
1d(
1.)
1V)
1~)
1H*
1p*
1:+
1b+
1,,
1T,
1|,
1F-
1n-
18.
1`.
1N
1K
0Y
0#"
0K"
0s"
0=#
0e#
0/$
0W$
0!%
0I%
0q%
0;&
0c&
0-'
0U'
0}'
0G(
0o(
09)
0a)
0+*
0S*
0{*
0E+
0m+
07,
0_,
0)-
0Q-
0y-
0C.
0k.
b111111111111111111111111111111110 )
#10040
1_
#10050
0O
1`
#10060
0Q
#10070
1a
0c
#10080
0b
1J
#10100
1c
#10110
0J
#20000
0I
1q
1;"
1c"
1-#
1U#
1}#
1G$
1o$
19%
1a%
1+&
1S&
1{&
1E'
1m'
17(
1_(
1))
1Q)
1y)
1C*
1k*
15+
1]+
1',
1O,
1w,
1A-
1i-
13.
1[.
b1 <
b1 +
b1 W
b1 d
b1 !"
b1 ."
b1 I"
b1 V"
b1 q"
b1 ~"
b1 ;#
b1 H#
b1 c#
b1 p#
b1 -$
b1 :$
b1 U$
b1 b$
b1 }$
b1 ,%
b1 G%
b1 T%
b1 o%
b1 |%
b1 9&
b1 F&
b1 a&
b1 n&
b1 +'
b1 8'
b1 S'
b1 `'
b1 {'
b1 *(
b1 E(
b1 R(
b1 m(
b1 z(
b1 7)
b1 D)
b1 _)
b1 l)
b1 )*
b1 6*
b1 Q*
b1 ^*
b1 y*
b1 (+
b1 C+
b1 P+
b1 k+
b1 x+
b1 5,
b1 B,
b1 ],
b1 j,
b1 '-
b1 4-
b1 O-
b1 \-
b1 w-
b1 &.
b1 A.
b1 N.
b1 i.
b1 v.
b11111111111111111111111111111110 %
b11111111111111111111111111111110 /
b10 '
b10 *
b10 :
#20010
0f
00"
0X"
0"#
0J#
0r#
0<$
0d$
0.%
0V%
0~%
0H&
0p&
0:'
0b'
0,(
0T(
0|(
0F)
0n)
08*
0`*
0*+
0R+
0z+
0D,
0l,
06-
0^-
0(.
0P.
0x.
0,
#20020
1L
1\
0t
0&"
0>"
0N"
0f"
0v"
00#
0@#
0X#
0h#
0"$
02$
0J$
0Z$
0r$
0$%
0<%
0L%
0d%
0t%
0.&
0>&
0V&
0f&
0~&
00'
0H'
0X'
0p'
0"(
0:(
0J(
0b(
0r(
0,)
0<)
0T)
0d)
0|)
0.*
0F*
0V*
0n*
0~*
08+
0H+
0`+
0p+
0*,
0:,
0R,
0b,
0z,
0,-
0D-
0T-
0l-
0|-
06.
0F.
0^.
0n.
#20030
0K
1s
1="
1e"
1/#
1W#
1!$
1I$
1q$
1;%
1c%
1-&
1U&
1}&
1G'
1o'
19(
1a(
1+)
1S)
1{)
1E*
1m*
17+
1_+
1),
1Q,
1y,
1C-
1k-
15.
1].
#20040
0_
1)"
1Q"
1y"
1C#
1k#
15$
1]$
1'%
1O%
1w%
1A&
1i&
13'
1['
1%(
1M(
1u(
1?)
1g)
11*
1Y*
1#+
1K+
1s+
1=,
1e,
1/-
1W-
1!.
1I.
1q.
#20050
1O
0w
0A"
0i"
03#
0[#
0%$
0M$
0u$
0?%
0g%
01&
0Y&
0#'
0K'
0s'
0=(
0e(
0/)
0W)
0!*
0I*
0q*
0;+
0c+
0-,
0U,
0},
0G-
0o-
09.
0a.
1P
0!
14"
1\"
1&#
1N#
1v#
1@$
1h$
12%
1Z%
1$&
1L&
1t&
1>'
1f'
10(
1X(
1")
1J)
1r)
1<*
1d*
1.+
1V+
1~+
1H,
1p,
1:-
1b-
1,.
1T.
1|.
#20060
0}
0V
b111111111111111111111111111111100 )
#20070
0a
1*"
1R"
1z"
1D#
1l#
16$
1^$
1(%
1P%
1x%
1B&
1j&
14'
1\'
1&(
1N(
1v(
1@)
1h)
12*
1Z*
1$+
1L+
1t+
1>,
1f,
10-
1X-
1".
1J.
1r.
1>
#20080
1b
1+"
0y
0C"
0k"
05#
0]#
0'$
0O$
0w$
0A%
0i%
03&
0[&
0%'
0M'
0u'
0?(
0g(
01)
0Y)
0#*
0K*
0s*
0=+
0e+
0/,
0W,
0!-
0I-
0q-
0;.
0c.
#20090
0,"
0-"
0U"
0}"
0G#
0o#
09$
0a$
0+%
0S%
0{%
0E&
0m&
07'
0_'
0)(
0Q(
0y(
0C)
0k)
05*
0]*
0'+
0O+
0w+
0A,
0i,
03-
0[-
0%.
0M.
0u.
0B
#20100
1r
1<"
1d"
1.#
1V#
1~#
1H$
1p$
1:%
1b%
1,&
1T&
1|&
1F'
1n'
18(
1`(
1*)
1R)
1z)
1D*
1l*
16+
1^+
1(,
1P,
1x,
1B-
1j-
14.
1\.
17
0c
1j
04"
0\"
0&#
0N#
0v#
0@$
0h$
02%
0Z%
0$&
0L&
0t&
0>'
0f'
00(
0X(
0")
0J)
0r)
0<*
0d*
0.+
0V+
0~+
0H,
0p,
0:-
0b-
0,.
0T.
0|.
#20110
0.
1J
1-"
#20120
0r
#20190
1X
b1 9
b1 E
#20220
b1 C
#20250
b1 "
b1 1
b1 H
#20580
18
#20590
0$
#30000
